!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define("uikit",e):(t="undefined"!=typeof globalThis?globalThis:t||self).UIkit=e()}(this,function(){"use strict";var t=Object.prototype,n=t.hasOwnProperty;function h(t,e){return n.call(t,e)}var e=/\B([A-Z])/g,d=rt(function(t){return t.replace(e,"-$1").toLowerCase()}),i=/-(\w)/g,f=rt(function(t){return t.replace(i,r)}),p=rt(function(t){return t.length?r(0,t.charAt(0))+t.slice(1):""});function r(t,e){return e?e.toUpperCase():""}var o=String.prototype,s=o.startsWith||function(t){return 0===this.lastIndexOf(t,0)};function w(t,e){return s.call(t,e)}var a=o.endsWith||function(t){return this.substr(-t.length)===t};function u(t,e){return a.call(t,e)}function c(t,e){return!!~this.indexOf(t,e)}var l=Array.prototype,m=o.includes||c,g=l.includes||c;function v(t,e){return t&&(z(t)?m:g).call(t,e)}var b=l.findIndex||function(t){for(var e=arguments,n=0;n<this.length;n++)if(t.call(e[1],this[n],n,this))return n;return-1};function x(t,e){return b.call(t,e)}var y=Array.isArray;function k(t){return"function"==typeof t}function $(t){return null!==t&&"object"==typeof t}var S=t.toString;function I(t){return"[object Object]"===S.call(t)}function E(t){return $(t)&&t===t.window}function T(t){return 9===A(t)}function C(t){return 1<=A(t)}function _(t){return 1===A(t)}function A(t){return!E(t)&&$(t)&&t.nodeType}function M(t){return"boolean"==typeof t}function z(t){return"string"==typeof t}function N(t){return"number"==typeof t}function B(t){return N(t)||z(t)&&!isNaN(t-parseFloat(t))}function D(t){return!(y(t)?t.length:$(t)&&Object.keys(t).length)}function O(t){return void 0===t}function P(t){return M(t)?t:"true"===t||"1"===t||""===t||"false"!==t&&"0"!==t&&t}function H(t){var e=Number(t);return!isNaN(e)&&e}function L(t){return parseFloat(t)||0}var j=Array.from||function(t){return l.slice.call(t)};function F(t){return W(t)[0]}function W(t){return t&&(C(t)?[t]:j(t).filter(C))||[]}function V(t){return E(t)?t:(t=F(t))?(T(t)?t:t.ownerDocument).defaultView:window}function R(t){return t?u(t,"ms")?L(t):1e3*L(t):0}function q(t,n){return t===n||$(t)&&$(n)&&Object.keys(t).length===Object.keys(n).length&&G(t,function(t,e){return t===n[e]})}function U(t,e,n){return t.replace(new RegExp(e+"|"+n,"g"),function(t){return t===e?n:e})}var Y=Object.assign||function(t){for(var e=[],n=arguments.length-1;0<n--;)e[n]=arguments[n+1];t=Object(t);for(var i=0;i<e.length;i++){var r=e[i];if(null!==r)for(var o in r)h(r,o)&&(t[o]=r[o])}return t};function X(t){return t[t.length-1]}function G(t,e){for(var n in t)if(!1===e(t[n],n))return!1;return!0}function K(t,r){return t.slice().sort(function(t,e){var n=t[r];void 0===n&&(n=0);var i=e[r];return void 0===i&&(i=0),i<n?1:n<i?-1:0})}function J(t,n){var i=new Set;return t.filter(function(t){var e=t[n];return!i.has(e)&&(i.add(e)||!0)})}function Z(t,e,n){return void 0===e&&(e=0),void 0===n&&(n=1),Math.min(Math.max(H(t)||0,e),n)}function Q(){}function tt(){for(var i=[],t=arguments.length;t--;)i[t]=arguments[t];return[["bottom","top"],["right","left"]].every(function(t){var e=t[0],n=t[1];return 0<Math.min.apply(Math,i.map(function(t){return t[e]}))-Math.max.apply(Math,i.map(function(t){return t[n]}))})}function et(t,e){return t.x<=e.right&&t.x>=e.left&&t.y<=e.bottom&&t.y>=e.top}var nt={ratio:function(t,e,n){var i="width"===e?"height":"width",r={};return r[i]=t[e]?Math.round(n*t[i]/t[e]):t[i],r[e]=n,r},contain:function(n,i){var r=this;return G(n=Y({},n),function(t,e){return n=n[e]>i[e]?r.ratio(n,e,i[e]):n}),n},cover:function(n,i){var r=this;return G(n=this.contain(n,i),function(t,e){return n=n[e]<i[e]?r.ratio(n,e,i[e]):n}),n}};function it(t,e,n,i){void 0===n&&(n=0),void 0===i&&(i=!1);var r=(e=W(e)).length;return t=B(t)?H(t):"next"===t?n+1:"previous"===t?n-1:e.indexOf(F(t)),i?Z(t,0,r-1):(t%=r)<0?t+r:t}function rt(e){var n=Object.create(null);return function(t){return n[t]||(n[t]=e(t))}}function ot(t,e,n){if($(e))for(var i in e)ot(t,i,e[i]);else{if(O(n))return(t=F(t))&&t.getAttribute(e);W(t).forEach(function(t){k(n)&&(n=n.call(t,ot(t,e))),null===n?at(t,e):t.setAttribute(e,n)})}}function st(t,e){return W(t).some(function(t){return t.hasAttribute(e)})}function at(t,e){t=W(t),e.split(" ").forEach(function(e){return t.forEach(function(t){return t.hasAttribute(e)&&t.removeAttribute(e)})})}function ut(t,e){for(var n=0,i=[e,"data-"+e];n<i.length;n++)if(st(t,i[n]))return ot(t,i[n])}var ct="undefined"!=typeof window,ht=ct&&/msie|trident/i.test(window.navigator.userAgent),lt=ct&&"rtl"===ot(document.documentElement,"dir"),dt=ct&&"ontouchstart"in window,ft=ct&&window.PointerEvent,pt=ct&&(dt||window.DocumentTouch&&document instanceof DocumentTouch||navigator.maxTouchPoints),mt=ft?"pointerdown":dt?"touchstart":"mousedown",gt=ft?"pointermove":dt?"touchmove":"mousemove",vt=ft?"pointerup":dt?"touchend":"mouseup",wt=ft?"pointerenter":dt?"":"mouseenter",bt=ft?"pointerleave":dt?"":"mouseleave",xt=ft?"pointercancel":"touchcancel",yt={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,menuitem:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0};function kt(t){return W(t).some(function(t){return yt[t.tagName.toLowerCase()]})}function $t(t){return W(t).some(function(t){return t.offsetWidth||t.offsetHeight||t.getClientRects().length})}var St="input,select,textarea,button";function It(t){return W(t).some(function(t){return At(t,St)})}function Et(t){return(t=F(t))&&_(t.parentNode)&&t.parentNode}function Tt(t,e){return W(t).filter(function(t){return At(t,e)})}var Ct=ct?Element.prototype:{},_t=Ct.matches||Ct.webkitMatchesSelector||Ct.msMatchesSelector||Q;function At(t,e){return W(t).some(function(t){return _t.call(t,e)})}var Mt=Ct.closest||function(t){var e=this;do{if(At(e,t))return e}while(e=Et(e))};function zt(t,e){return w(e,">")&&(e=e.slice(1)),_(t)?Mt.call(t,e):W(t).map(function(t){return zt(t,e)}).filter(Boolean)}function Nt(t,e){return z(e)?At(t,e)||!!zt(t,e):t===e||(T(e)?e.documentElement:F(e)).contains(F(t))}function Bt(t,e){for(var n=[];t=Et(t);)e&&!At(t,e)||n.push(t);return n}function Dt(t,e){var n=(t=F(t))?W(t.children):[];return e?Tt(n,e):n}function Ot(t,e){return e?W(t).indexOf(F(e)):Dt(Et(t)).indexOf(t)}function Pt(t,e){return F(t)||jt(t,Lt(t,e))}function Ht(t,e){var n=W(t);return n.length&&n||Ft(t,Lt(t,e))}function Lt(t,e){return void 0===e&&(e=document),z(t)&&qt(t)||T(e)?e:e.ownerDocument}function jt(t,e){return F(Wt(t,e,"querySelector"))}function Ft(t,e){return W(Wt(t,e,"querySelectorAll"))}function Wt(t,s,e){if(void 0===s&&(s=document),!t||!z(t))return null;t=t.replace(Rt,"$1 *"),qt(t)&&(t=Yt(t).map(function(t,e){var n,i,r,o=s;return"!"===t[0]&&(n=t.substr(1).trim().split(" "),o=zt(Et(s),n[0]),t=n.slice(1).join(" ").trim()),"-"===t[0]&&(i=t.substr(1).trim().split(" "),o=At(r=(o||s).previousElementSibling,t.substr(1))?r:null,t=i.slice(1).join(" ")),o?function(t){var e=[];for(;t.parentNode;){if(t.id){e.unshift("#"+Gt(t.id));break}var n=t.tagName;"HTML"!==n&&(n+=":nth-child("+(Ot(t)+1)+")"),e.unshift(n),t=t.parentNode}return e.join(" > ")}(o)+" "+t:null}).filter(Boolean).join(","),s=document);try{return s[e](t)}catch(t){return null}}var Vt=/(^|[^\\],)\s*[!>+~-]/,Rt=/([!>+~-])(?=\s+[!>+~-]|\s*$)/g,qt=rt(function(t){return t.match(Vt)}),Ut=/.*?[^\\](?:,|$)/g,Yt=rt(function(t){return t.match(Ut).map(function(t){return t.replace(/,$/,"").trim()})});var Xt=ct&&window.CSS&&CSS.escape||function(t){return t.replace(/([^\x7f-\uFFFF\w-])/g,function(t){return"\\"+t})};function Gt(t){return z(t)?Xt.call(null,t):""}function Kt(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n,i,r=ee(t),o=r[0],s=r[1],a=r[2],u=r[3],c=r[4],o=oe(o);return 1<u.length&&(n=u,u=function(t){return y(t.detail)?n.apply(void 0,[t].concat(t.detail)):n(t)}),c&&c.self&&(i=u,u=function(t){if(t.target===t.currentTarget||t.target===t.current)return i.call(null,t)}),a&&(u=function(n,i){var r=this;return function(e){var t=">"===n[0]?Ft(n,e.currentTarget).reverse().filter(function(t){return Nt(e.target,t)})[0]:zt(e.target,n);t&&(e.current=t,i.call(r,e))}}(a,u)),c=ne(c),s.split(" ").forEach(function(e){return o.forEach(function(t){return t.addEventListener(e,u,c)})}),function(){return Jt(o,s,u,c)}}function Jt(t,e,n,i){void 0===i&&(i=!1),i=ne(i),t=oe(t),e.split(" ").forEach(function(e){return t.forEach(function(t){return t.removeEventListener(e,n,i)})})}function Zt(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=ee(t),i=n[0],r=n[1],o=n[2],s=n[3],a=n[4],u=n[5],c=Kt(i,r,o,function(t){var e=!u||u(t);e&&(c(),s(t,e))},a);return c}function Qt(t,n,i){return oe(t).reduce(function(t,e){return t&&e.dispatchEvent(te(n,!0,!0,i))},!0)}function te(t,e,n,i){var r;return void 0===e&&(e=!0),void 0===n&&(n=!1),z(t)&&((r=document.createEvent("CustomEvent")).initCustomEvent(t,e,n,i),t=r),t}function ee(t){return k(t[2])&&t.splice(2,0,!1),t}function ne(t){return t&&ht&&!M(t)?!!t.capture:t}function ie(t){return t&&"addEventListener"in t}function re(t){return ie(t)?t:F(t)}function oe(t){return y(t)?t.map(re).filter(Boolean):z(t)?Ft(t):ie(t)?[t]:W(t)}function se(t){return"touch"===t.pointerType||!!t.touches}function ae(t){var e=t.touches,n=t.changedTouches,i=e&&e[0]||n&&n[0]||t;return{x:i.clientX,y:i.clientY}}function ue(){var n=this;this.promise=new ce(function(t,e){n.reject=e,n.resolve=t})}var ce=ct&&window.Promise||de,he=2,le=ct&&window.setImmediate||setTimeout;function de(t){this.state=he,this.value=void 0,this.deferred=[];var e=this;try{t(function(t){e.resolve(t)},function(t){e.reject(t)})}catch(t){e.reject(t)}}de.reject=function(n){return new de(function(t,e){e(n)})},de.resolve=function(n){return new de(function(t,e){t(n)})},de.all=function(o){return new de(function(n,t){var i=[],r=0;0===o.length&&n(i);for(var e=0;e<o.length;e+=1)de.resolve(o[e]).then(function(e){return function(t){i[e]=t,(r+=1)===o.length&&n(i)}}(e),t)})},de.race=function(i){return new de(function(t,e){for(var n=0;n<i.length;n+=1)de.resolve(i[n]).then(t,e)})};var fe=de.prototype;function pe(t,e){var n=Y({data:null,method:"GET",headers:{},xhr:new XMLHttpRequest,beforeSend:Q,responseType:""},e);return ce.resolve().then(function(){return n.beforeSend(n)}).then(function(){return o=t,s=n,new ce(function(t,e){var n,i,r=s.xhr;for(n in s)if(n in r)try{r[n]=s[n]}catch(t){}for(i in r.open(s.method.toUpperCase(),o),s.headers)r.setRequestHeader(i,s.headers[i]);Kt(r,"load",function(){0===r.status||200<=r.status&&r.status<300||304===r.status?("json"===s.responseType&&z(r.response)&&(r=Y(function(t){var e,n={};for(e in t)n[e]=t[e];return n}(r),{response:JSON.parse(r.response)})),t(r)):e(Y(Error(r.statusText),{xhr:r,status:r.status}))}),Kt(r,"error",function(){return e(Y(Error("Network Error"),{xhr:r}))}),Kt(r,"timeout",function(){return e(Y(Error("Network Timeout"),{xhr:r}))}),r.send(s.data)});var o,s})}function me(i,r,o){return new ce(function(t,e){var n=new Image;n.onerror=function(t){return e(t)},n.onload=function(){return t(n)},o&&(n.sizes=o),r&&(n.srcset=r),n.src=i})}function ge(t){return(t=Ae(t)).innerHTML="",t}function ve(t,e){return t=Ae(t),O(e)?t.innerHTML:we(t.hasChildNodes()?ge(t):t,e)}function we(e,t){return e=Ae(e),ye(t,function(t){return e.appendChild(t)})}function be(e,t){return e=Ae(e),ye(t,function(t){return e.parentNode.insertBefore(t,e)})}function xe(e,t){return e=Ae(e),ye(t,function(t){return e.nextSibling?be(e.nextSibling,t):we(e.parentNode,t)})}function ye(t,e){return(t=z(t)?Ce(t):t)?"length"in t?W(t).map(e):e(t):null}function ke(t){W(t).forEach(function(t){return t.parentNode&&t.parentNode.removeChild(t)})}function $e(t,e){for(e=F(be(t,e));e.firstChild;)e=e.firstChild;return we(e,t),e}function Se(t,e){return W(W(t).map(function(t){return t.hasChildNodes?$e(W(t.childNodes),e):we(t,e)}))}function Ie(t){W(t).map(Et).filter(function(t,e,n){return n.indexOf(t)===e}).forEach(function(t){be(t,t.childNodes),ke(t)})}fe.resolve=function(t){var e=this;if(e.state===he){if(t===e)throw new TypeError("Promise settled with itself.");var n=!1;try{var i=t&&t.then;if(null!==t&&$(t)&&k(i))return void i.call(t,function(t){n||e.resolve(t),n=!0},function(t){n||e.reject(t),n=!0})}catch(t){return void(n||e.reject(t))}e.state=0,e.value=t,e.notify()}},fe.reject=function(t){var e=this;if(e.state===he){if(t===e)throw new TypeError("Promise settled with itself.");e.state=1,e.value=t,e.notify()}},fe.notify=function(){var o=this;le(function(){if(o.state!==he)for(;o.deferred.length;){var t=o.deferred.shift(),e=t[0],n=t[1],i=t[2],r=t[3];try{0===o.state?k(e)?i(e.call(void 0,o.value)):i(o.value):1===o.state&&(k(n)?i(n.call(void 0,o.value)):r(o.value))}catch(t){r(t)}}})},fe.then=function(n,i){var r=this;return new de(function(t,e){r.deferred.push([n,i,t,e]),r.notify()})},fe.catch=function(t){return this.then(void 0,t)};var Ee=/^\s*<(\w+|!)[^>]*>/,Te=/^<(\w+)\s*\/?>(?:<\/\1>)?$/;function Ce(t){var e=Te.exec(t);if(e)return document.createElement(e[1]);var n=document.createElement("div");return Ee.test(t)?n.insertAdjacentHTML("beforeend",t.trim()):n.textContent=t,1<n.childNodes.length?W(n.childNodes):n.firstChild}function _e(t,e){if(_(t))for(e(t),t=t.firstElementChild;t;){var n=t.nextElementSibling;_e(t,e),t=n}}function Ae(t,e){return z(t)?ze(t)?F(Ce(t)):jt(t,e):F(t)}function Me(t,e){return z(t)?ze(t)?W(Ce(t)):Ft(t,e):W(t)}function ze(t){return"<"===t[0]||t.match(/^\s*</)}function Ne(t){for(var e=[],n=arguments.length-1;0<n--;)e[n]=arguments[n+1];Le(t,e,"add")}function Be(t){for(var e=[],n=arguments.length-1;0<n--;)e[n]=arguments[n+1];Le(t,e,"remove")}function De(t,e){ot(t,"class",function(t){return(t||"").replace(new RegExp("\\b"+e+"\\b","g"),"")})}function Oe(t){for(var e=[],n=arguments.length-1;0<n--;)e[n]=arguments[n+1];e[0]&&Be(t,e[0]),e[1]&&Ne(t,e[1])}function Pe(t,e){e=je(e)[0];for(var n=W(t),i=0;i<n.length;i++)if(e&&n[i].classList.contains(e))return!0;return!1}function He(t,e,n){e=je(e);for(var i=W(t),r=0;r<i.length;r++)for(var o=i[r].classList,s=0;s<e.length;s++)O(n)?o.toggle(e[s]):Fe.Force?o.toggle(e[s],!!n):o[n?"add":"remove"](e[s])}function Le(t,n,i){var r;n=n.reduce(function(t,e){return t.concat(je(e))},[]);for(var o=W(t),e=0;e<o.length;e++)!function(e){Fe.Multiple?(r=o[e].classList)[i].apply(r,n):n.forEach(function(t){return o[e].classList[i](t)})}(e)}function je(t){return(~(t=String(t)).indexOf(" ")?t.split(" "):[t]).filter(Boolean)}var Fe={get Multiple(){return this.get("Multiple")},get Force(){return this.get("Force")},get:function(t){var e=document.createElement("_").classList;return e.add("a","b"),e.toggle("c",!1),(Fe={Multiple:e.contains("b"),Force:!e.contains("c")})[t]}},We={"animation-iteration-count":!0,"column-count":!0,"fill-opacity":!0,"flex-grow":!0,"flex-shrink":!0,"font-weight":!0,"line-height":!0,opacity:!0,order:!0,orphans:!0,"stroke-dasharray":!0,"stroke-dashoffset":!0,widows:!0,"z-index":!0,zoom:!0};function Ve(t,e,r,o){return void 0===o&&(o=""),W(t).map(function(n){if(z(e)){if(e=Xe(e),O(r))return qe(n,e);r||N(r)?n.style.setProperty(e,B(r)&&!We[e]?r+"px":r,o):n.style.removeProperty(e)}else{if(y(e)){var i=Re(n);return e.reduce(function(t,e){return t[e]=i[Xe(e)],t},{})}$(e)&&(o=r,G(e,function(t,e){return Ve(n,e,t,o)}))}return n})[0]}function Re(t,e){return V(t).getComputedStyle(t,e)}function qe(t,e,n){return Re(t,n)[e]}var Ue=rt(function(t){var e=we(document.documentElement,document.createElement("div"));return Ne(e,"uk-"+t),t=qe(e,"content",":before").replace(/^["'](.*)["']$/,"$1"),ke(e),t});function Ye(t){return ht?Ue(t):Re(document.documentElement).getPropertyValue("--uk-"+t)}var Xe=rt(function(t){t=d(t);var e=document.documentElement.style;if(t in e)return t;var n,i=Ge.length;for(;i--;)if((n="-"+Ge[i]+"-"+t)in e)return n}),Ge=["webkit","moz","ms"];function Ke(t,s,a,u){return void 0===a&&(a=400),void 0===u&&(u="linear"),ce.all(W(t).map(function(o){return new ce(function(n,i){for(var t in s){var e=Ve(o,t);""===e&&Ve(o,t,e)}var r=setTimeout(function(){return Qt(o,"transitionend")},a);Zt(o,"transitionend transitioncanceled",function(t){var e=t.type;clearTimeout(r),Be(o,"uk-transition"),Ve(o,{transitionProperty:"",transitionDuration:"",transitionTimingFunction:""}),"transitioncanceled"===e?i():n(o)},{self:!0}),Ne(o,"uk-transition"),Ve(o,Y({transitionProperty:Object.keys(s).map(Xe).join(","),transitionDuration:a+"ms",transitionTimingFunction:u},s))})}))}var Je={start:Ke,stop:function(t){return Qt(t,"transitionend"),ce.resolve()},cancel:function(t){Qt(t,"transitioncanceled")},inProgress:function(t){return Pe(t,"uk-transition")}},Ze="uk-animation-";function Qe(t,e,s,a,u){return void 0===s&&(s=200),ce.all(W(t).map(function(o){return new ce(function(n,i){Qt(o,"animationcanceled");var r=setTimeout(function(){return Qt(o,"animationend")},s);Zt(o,"animationend animationcanceled",function(t){var e=t.type;clearTimeout(r),"animationcanceled"===e?i():n(o),Ve(o,"animationDuration",""),De(o,Ze+"\\S*")},{self:!0}),Ve(o,"animationDuration",s+"ms"),Ne(o,e,Ze+(u?"leave":"enter")),w(e,Ze)&&(a&&Ne(o,"uk-transform-origin-"+a),u&&Ne(o,Ze+"reverse"))})}))}var tn=new RegExp(Ze+"(enter|leave)"),en={in:Qe,out:function(t,e,n,i){return Qe(t,e,n,i,!0)},inProgress:function(t){return tn.test(ot(t,"class"))},cancel:function(t){Qt(t,"animationcanceled")}},nn={width:["left","right"],height:["top","bottom"]};function rn(t){var e=_(t)?F(t).getBoundingClientRect():{height:un(t),width:cn(t),top:0,left:0};return{height:e.height,width:e.width,top:e.top,left:e.left,bottom:e.top+e.height,right:e.left+e.width}}function on(n,i){var t,r=rn(n),e=V(n),o={height:e.pageYOffset,width:e.pageXOffset};for(t in nn)for(var s in nn[t])r[nn[t][s]]+=o[t];if(!i)return r;var a=Ve(n,"position");G(Ve(n,["left","top"]),function(t,e){return Ve(n,e,i[e]-r[e]+L("absolute"===a&&"auto"===t?sn(n)[e]:t))})}function sn(t){for(var e,n=on(t),i=n.top,r=n.left,o=F(t),s=o.ownerDocument,a=s.body,u=s.documentElement,c=o.offsetParent||u;c&&(c===a||c===u)&&"static"===Ve(c,"position");)c=c.parentNode;return _(c)&&(i-=(e=on(c)).top+L(Ve(c,"borderTopWidth")),r-=e.left+L(Ve(c,"borderLeftWidth"))),{top:i-L(Ve(t,"marginTop")),left:r-L(Ve(t,"marginLeft"))}}function an(t){var e=[0,0];t=F(t);do{if(e[0]+=t.offsetTop,e[1]+=t.offsetLeft,"fixed"===Ve(t,"position")){var n=V(t);return e[0]+=n.pageYOffset,e[1]+=n.pageXOffset,e}}while(t=t.offsetParent);return e}var un=hn("height"),cn=hn("width");function hn(i){var r=p(i);return function(t,e){if(O(e)){if(E(t))return t["inner"+r];if(T(t)){var n=t.documentElement;return Math.max(n["offset"+r],n["scroll"+r])}return(e="auto"===(e=Ve(t=F(t),i))?t["offset"+r]:L(e)||0)-ln(t,i)}return Ve(t,i,e||0===e?+e+ln(t,i)+"px":"")}}function ln(n,t,e){return void 0===e&&(e="border-box"),Ve(n,"boxSizing")===e?nn[t].map(p).reduce(function(t,e){return t+L(Ve(n,"padding"+e))+L(Ve(n,"border"+e+"Width"))},0):0}function dn(t){for(var e in nn)for(var n in nn[e])if(nn[e][n]===t)return nn[e][1-n];return t}function fn(t,e,n){return void 0===e&&(e="width"),void 0===n&&(n=window),B(t)?+t:u(t,"vh")?pn(un(V(n)),t):u(t,"vw")?pn(cn(V(n)),t):u(t,"%")?pn(rn(n)[e],t):L(t)}function pn(t,e){return t*L(e)/100}var mn={reads:[],writes:[],read:function(t){return this.reads.push(t),wn(),t},write:function(t){return this.writes.push(t),wn(),t},clear:function(t){xn(this.reads,t),xn(this.writes,t)},flush:gn};function gn(t){void 0===t&&(t=1),bn(mn.reads),bn(mn.writes.splice(0)),mn.scheduled=!1,(mn.reads.length||mn.writes.length)&&wn(t+1)}var vn=4;function wn(t){mn.scheduled||(mn.scheduled=!0,t&&t<vn?ce.resolve().then(function(){return gn(t)}):requestAnimationFrame(function(){return gn()}))}function bn(t){for(var e;e=t.shift();)try{e()}catch(t){console.error(t)}}function xn(t,e){var n=t.indexOf(e);return~n&&t.splice(n,1)}function yn(){}yn.prototype={positions:[],init:function(){var e,t=this;this.positions=[],this.unbind=Kt(document,"mousemove",function(t){return e=ae(t)}),this.interval=setInterval(function(){e&&(t.positions.push(e),5<t.positions.length&&t.positions.shift())},50)},cancel:function(){this.unbind&&this.unbind(),this.interval&&clearInterval(this.interval)},movesTo:function(t){if(this.positions.length<2)return!1;var n=t.getBoundingClientRect(),e=n.left,i=n.right,r=n.top,o=n.bottom,s=this.positions[0],a=X(this.positions),u=[s,a];return!et(a,n)&&[[{x:e,y:r},{x:i,y:o}],[{x:e,y:o},{x:i,y:r}]].some(function(t){var e=function(t,e){var n=t[0],i=n.x,r=n.y,o=t[1],s=o.x,a=o.y,u=e[0],c=u.x,h=u.y,l=e[1],d=l.x,f=l.y,p=(f-h)*(s-i)-(d-c)*(a-r);if(0==p)return!1;var m=((d-c)*(r-h)-(f-h)*(i-c))/p;if(m<0)return!1;return{x:i+m*(s-i),y:r+m*(a-r)}}(u,t);return e&&et(e,n)})}};var kn={};function $n(t,e,n){return kn.computed(k(t)?t.call(n,n):t,k(e)?e.call(n,n):e)}function Sn(t,e){return t=t&&!y(t)?[t]:t,e?t?t.concat(e):y(e)?e:[e]:t}function In(e,n,i){var t,r,o={};if(k(n)&&(n=n.options),n.extends&&(e=In(e,n.extends,i)),n.mixins)for(var s=0,a=n.mixins.length;s<a;s++)e=In(e,n.mixins[s],i);for(t in e)u(t);for(r in n)h(e,r)||u(r);function u(t){o[t]=(kn[t]||function(t,e){return O(e)?t:e})(e[t],n[t],i)}return o}function En(t,e){var n;void 0===e&&(e=[]);try{return t?w(t,"{")?JSON.parse(t):e.length&&!v(t,":")?((n={})[e[0]]=t,n):t.split(";").reduce(function(t,e){var n=e.split(/:(.*)/),i=n[0],r=n[1];return i&&!O(r)&&(t[i.trim()]=r.trim()),t},{}):{}}catch(t){return{}}}function Tn(t){if(Mn(t)&&Bn(t,{func:"playVideo",method:"play"}),An(t))try{t.play().catch(Q)}catch(t){}}function Cn(t){Mn(t)&&Bn(t,{func:"pauseVideo",method:"pause"}),An(t)&&t.pause()}function _n(t){Mn(t)&&Bn(t,{func:"mute",method:"setVolume",value:0}),An(t)&&(t.muted=!0)}function An(t){return t&&"VIDEO"===t.tagName}function Mn(t){return t&&"IFRAME"===t.tagName&&(zn(t)||Nn(t))}function zn(t){return!!t.src.match(/\/\/.*?youtube(-nocookie)?\.[a-z]+\/(watch\?v=[^&\s]+|embed)|youtu\.be\/.*/)}function Nn(t){return!!t.src.match(/vimeo\.com\/video\/.*/)}function Bn(t,e){(function(e){if(e[On])return e[On];var n,i=zn(e),r=Nn(e),o=++Pn;return e[On]=new ce(function(t){i&&Zt(e,"load",function(){function t(){return Dn(e,{event:"listening",id:o})}n=setInterval(t,100),t()}),Zt(window,"message",t,!1,function(t){var e=t.data;try{return(e=JSON.parse(e))&&(i&&e.id===o&&"onReady"===e.event||r&&Number(e.player_id)===o)}catch(t){}}),e.src=e.src+(v(e.src,"?")?"&":"?")+(i?"enablejsapi=1":"api=1&player_id="+o)}).then(function(){return clearInterval(n)})})(t).then(function(){return Dn(t,e)})}function Dn(t,e){try{t.contentWindow.postMessage(JSON.stringify(Y({event:"command"},e)),"*")}catch(t){}}kn.events=kn.created=kn.beforeConnect=kn.connected=kn.beforeDisconnect=kn.disconnected=kn.destroy=Sn,kn.args=function(t,e){return!1!==e&&Sn(e||t)},kn.update=function(t,e){return K(Sn(t,k(e)?{read:e}:e),"order")},kn.props=function(t,e){return y(e)&&(e=e.reduce(function(t,e){return t[e]=String,t},{})),kn.methods(t,e)},kn.computed=kn.methods=function(t,e){return e?t?Y({},t,e):e:t},kn.data=function(e,n,t){return t?$n(e,n,t):n?e?function(t){return $n(e,n,t)}:n:e};var On="_ukPlayer",Pn=0;function Hn(t,s,a){return void 0===s&&(s=0),void 0===a&&(a=0),!!$t(t)&&tt.apply(void 0,Wn(t).map(function(t){var e=on(Vn(t)),n=e.top,i=e.left,r=e.bottom,o=e.right;return{top:n-s,left:i-a,bottom:r+s,right:o+a}}).concat(on(t)))}function Ln(t,e){(t=(E(t)||T(t)?qn:F)(t)).scrollTop=e}function jn(s,t){void 0===t&&(t={});var a=t.offset;if(void 0===a&&(a=0),$t(s)){var u=Wn(s),c=0;return u.reduce(function(t,e,n){var i=e.scrollTop,r=e.scrollHeight-Rn(e),o=Math.ceil(on(u[n-1]||s).top-on(Vn(e)).top-a+c+i);return r<o?(c=o-r,o=r):c=0,function(){return a=e,u=o-i,new ce(function(i){var t,r=a.scrollTop,o=(t=Math.abs(u),40*Math.pow(t,.375)),s=Date.now();!function t(){var e,n=(e=Z((Date.now()-s)/o),.5*(1-Math.cos(Math.PI*e)));Ln(a,r+u*n),1!=n?requestAnimationFrame(t):i()}()}).then(t);var a,u}},function(){return ce.resolve()})()}}function Fn(t,e){if(void 0===e&&(e=0),!$t(t))return 0;var n=Wn(t,/auto|scroll/,!0)[0],i=n.scrollHeight,r=n.scrollTop,o=Rn(n),s=an(t)[0]-r-an(n)[0],a=Math.min(o,s+r);return Z(-1*(s-a)/Math.min(t.offsetHeight+e+a,i-(s+r),i-o))}function Wn(t,e,n){void 0===e&&(e=/auto|scroll|hidden/),void 0===n&&(n=!1);var i=qn(t),r=Bt(t).reverse(),o=x(r=r.slice(r.indexOf(i)+1),function(t){return"fixed"===Ve(t,"position")});return~o&&(r=r.slice(o)),[i].concat(r.filter(function(t){return e.test(Ve(t,"overflow"))&&(!n||t.scrollHeight>Rn(t))})).reverse()}function Vn(t){return t===qn(t)?window:t}function Rn(t){return(t===qn(t)?document.documentElement:t).clientHeight}function qn(t){var e=V(t).document;return e.scrollingElement||e.documentElement}var Un={width:["x","left","right"],height:["y","top","bottom"]};function Yn(t,e,h,l,d,n,i,r){h=Gn(h),l=Gn(l);var f={element:h,target:l};if(!t||!e)return f;var o,p=on(t),m=on(e),g=m;return Xn(g,h,p,-1),Xn(g,l,m,1),d=Kn(d,p.width,p.height),n=Kn(n,m.width,m.height),d.x+=n.x,d.y+=n.y,g.left+=d.x,g.top+=d.y,i&&(o=Wn(t).map(Vn),r&&v(o,r)&&o.unshift(r),o=o.map(function(t){return on(t)}),G(Un,function(t,s){var a=t[0],u=t[1],c=t[2];!0!==i&&!v(i,a)||o.some(function(i){var t=h[a]===u?-p[s]:h[a]===c?p[s]:0,e=l[a]===u?m[s]:l[a]===c?-m[s]:0;if(g[u]<i[u]||g[u]+p[s]>i[c]){var n=p[s]/2,r="center"===l[a]?-m[s]/2:0;return"center"===h[a]&&(o(n,r)||o(-n,-r))||o(t,e)}function o(e,t){var n=L((g[u]+e+t-2*d[a]).toFixed(4));if(n>=i[u]&&n+p[s]<=i[c])return g[u]=n,["element","target"].forEach(function(t){f[t][a]=e?f[t][a]===Un[s][1]?Un[s][2]:Un[s][1]:f[t][a]}),!0}})})),on(t,g),f}function Xn(o,s,a,u){G(Un,function(t,e){var n=t[0],i=t[1],r=t[2];s[n]===r?o[i]+=a[e]*u:"center"===s[n]&&(o[i]+=a[e]*u/2)})}function Gn(t){var e=/left|center|right/,n=/top|center|bottom/;return 1===(t=(t||"").split(" ")).length&&(t=e.test(t[0])?t.concat("center"):n.test(t[0])?["center"].concat(t):["center","center"]),{x:e.test(t[0])?t[0]:"center",y:n.test(t[1])?t[1]:"center"}}function Kn(t,e,n){var i=(t||"").split(" "),r=i[0],o=i[1];return{x:r?L(r)*(u(r,"%")?e/100:1):0,y:o?L(o)*(u(o,"%")?n/100:1):0}}var Jn=Object.freeze({__proto__:null,ajax:pe,getImage:me,transition:Ke,Transition:Je,animate:Qe,Animation:en,attr:ot,hasAttr:st,removeAttr:at,data:ut,addClass:Ne,removeClass:Be,removeClasses:De,replaceClass:Oe,hasClass:Pe,toggleClass:He,dimensions:rn,offset:on,position:sn,offsetPosition:an,height:un,width:cn,boxModelAdjust:ln,flipPosition:dn,toPx:fn,ready:function(t){var e;"loading"===document.readyState?e=Kt(document,"DOMContentLoaded",function(){e(),t()}):t()},empty:ge,html:ve,prepend:function(e,t){return(e=Ae(e)).hasChildNodes()?ye(t,function(t){return e.insertBefore(t,e.firstChild)}):we(e,t)},append:we,before:be,after:xe,remove:ke,wrapAll:$e,wrapInner:Se,unwrap:Ie,fragment:Ce,apply:_e,$:Ae,$$:Me,inBrowser:ct,isIE:ht,isRtl:lt,hasTouch:pt,pointerDown:mt,pointerMove:gt,pointerUp:vt,pointerEnter:wt,pointerLeave:bt,pointerCancel:xt,on:Kt,off:Jt,once:Zt,trigger:Qt,createEvent:te,toEventTargets:oe,isTouch:se,getEventPos:ae,fastdom:mn,isVoidElement:kt,isVisible:$t,selInput:St,isInput:It,parent:Et,filter:Tt,matches:At,closest:zt,within:Nt,parents:Bt,children:Dt,index:Ot,hasOwn:h,hyphenate:d,camelize:f,ucfirst:p,startsWith:w,endsWith:u,includes:v,findIndex:x,isArray:y,isFunction:k,isObject:$,isPlainObject:I,isWindow:E,isDocument:T,isNode:C,isElement:_,isBoolean:M,isString:z,isNumber:N,isNumeric:B,isEmpty:D,isUndefined:O,toBoolean:P,toNumber:H,toFloat:L,toArray:j,toNode:F,toNodes:W,toWindow:V,toMs:R,isEqual:q,swap:U,assign:Y,last:X,each:G,sortBy:K,uniqueBy:J,clamp:Z,noop:Q,intersectRect:tt,pointInRect:et,Dimensions:nt,getIndex:it,cacheFunction:rt,MouseTracker:yn,mergeOptions:In,parseOptions:En,play:Tn,pause:Cn,mute:_n,positionAt:Yn,Promise:ce,Deferred:ue,query:Pt,queryAll:Ht,find:jt,findAll:Ft,escape:Gt,css:Ve,getCssVar:Ye,propName:Xe,isInView:Hn,scrollTop:Ln,scrollIntoView:jn,scrolledOver:Fn,scrollParents:Wn,getViewport:Vn,getViewportClientHeight:Rn});function Zn(t){this._init(t)}var Qn,ti,ei,ni,ii,ri,oi,si,ai,ui=rt(function(t){return!(!w(t,"uk-")&&!w(t,"data-uk-"))&&f(t.replace("data-uk-","").replace("uk-",""))});function ci(t,e){if(t)for(var n in t)t[n]._connected&&t[n]._callUpdate(e)}function hi(t,e){var n={},i=t.args;void 0===i&&(i=[]);var r=t.props;void 0===r&&(r={});var o,s=t.el;if(!r)return n;for(o in r){var a=d(o),u=ut(s,a);O(u)||(u=r[o]===Boolean&&""===u||di(r[o],u),("target"!==a||u&&!w(u,"_"))&&(n[o]=u))}var c,h=En(ut(s,e),i);for(c in h){var l=f(c);void 0!==r[l]&&(n[l]=di(r[l],h[c]))}return n}function li(e,n,i){I(n)||(n={name:i,handler:n});var t=n.name,r=n.el,o=n.handler,s=n.capture,a=n.passive,u=n.delegate,c=n.filter,h=n.self,r=k(r)?r.call(e):r||e.$el;y(r)?r.forEach(function(t){return li(e,Y({},n,{el:t}),i)}):!r||c&&!c.call(e)||e._events.push(Kt(r,t,u?z(u)?u:u.call(e):null,z(o)?e[o]:o.bind(e),{passive:a,capture:s,self:h}))}function di(t,e){return t===Boolean?P(e):t===Number?H(e):"list"===t?y(n=e)?n:z(n)?n.split(/,(?![^(]*\))/).map(function(t){return B(t)?H(t):P(t.trim())}):[n]:t?t(e):e;var n}Zn.util=Jn,Zn.data="__uikit__",Zn.prefix="uk-",Zn.options={},Zn.version="3.6.17",ei=(Qn=Zn).data,Qn.use=function(t){if(!t.installed)return t.call(null,this),t.installed=!0,this},Qn.mixin=function(t,e){(e=(z(e)?Qn.component(e):e)||this).options=In(e.options,t)},Qn.extend=function(t){t=t||{};function e(t){this._init(t)}return((e.prototype=Object.create(this.prototype)).constructor=e).options=In(this.options,t),e.super=this,e.extend=this.extend,e},Qn.update=function(t,e){Bt(t=t?F(t):document.body).reverse().forEach(function(t){return ci(t[ei],e)}),_e(t,function(t){return ci(t[ei],e)})},Object.defineProperty(Qn,"container",{get:function(){return ti||document.body},set:function(t){ti=Ae(t)}}),(ni=Zn).prototype._callHook=function(t){var e=this,n=this.$options[t];n&&n.forEach(function(t){return t.call(e)})},ni.prototype._callConnected=function(){this._connected||(this._data={},this._computeds={},this._initProps(),this._callHook("beforeConnect"),this._connected=!0,this._initEvents(),this._initObservers(),this._callHook("connected"),this._callUpdate())},ni.prototype._callDisconnected=function(){this._connected&&(this._callHook("beforeDisconnect"),this._disconnectObservers(),this._unbindEvents(),this._callHook("disconnected"),this._connected=!1,delete this._watch)},ni.prototype._callUpdate=function(t){var e=this;void 0===t&&(t="update"),this._connected&&("update"!==t&&"resize"!==t||this._callWatches(),this.$options.update&&(this._updates||(this._updates=new Set,mn.read(function(){(function(s){for(var a=this,u=this.$options.update,t=0;t<u.length;t++)!function(t){var e,n=u[t],i=n.read,r=n.write,o=n.events;(s.has("update")||o&&o.some(function(t){return s.has(t)}))&&(e=void 0,i&&(e=i.call(a,a._data,s))&&I(e)&&Y(a._data,e),r&&!1!==e&&mn.write(function(){return r.call(a,a._data,s)}))}(t)}).call(e,e._updates),delete e._updates})),this._updates.add(t.type||t)))},ni.prototype._callWatches=function(){var u,c=this;this._watch||(u=!h(this,"_watch"),this._watch=mn.read(function(){var t,e=c.$options.computed,n=c._computeds;for(t in e){var i=h(n,t),r=n[t];delete n[t];var o=e[t],s=o.watch,a=o.immediate;s&&(u&&a||i&&!q(r,c[t]))&&s.call(c,c[t],r)}c._watch=null}))},ri=0,(ii=Zn).prototype._init=function(t){(t=t||{}).data=function(t,e){var n=t.data,i=e.args,r=e.props;void 0===r&&(r={});if(n=y(n)?D(i)?void 0:n.slice(0,i.length).reduce(function(t,e,n){return I(e)?Y(t,e):t[i[n]]=e,t},{}):n)for(var o in n)O(n[o])?delete n[o]:n[o]=r[o]?di(r[o],n[o]):n[o];return n}(t,this.constructor.options),this.$options=In(this.constructor.options,t,this),this.$el=null,this.$props={},this._uid=ri++,this._initData(),this._initMethods(),this._initComputeds(),this._callHook("created"),t.el&&this.$mount(t.el)},ii.prototype._initData=function(){var t,e=this.$options.data;for(t in void 0===e&&(e={}),e)this.$props[t]=this[t]=e[t]},ii.prototype._initMethods=function(){var t=this.$options.methods;if(t)for(var e in t)this[e]=t[e].bind(this)},ii.prototype._initComputeds=function(){var t=this.$options.computed;if(this._computeds={},t)for(var e in t)!function(i,r,o){Object.defineProperty(i,r,{enumerable:!0,get:function(){var t=i._computeds,e=i.$props,n=i.$el;return h(t,r)||(t[r]=(o.get||o).call(i,e,n)),t[r]},set:function(t){var e=i._computeds;e[r]=o.set?o.set.call(i,t):t,O(e[r])&&delete e[r]}})}(this,e,t[e])},ii.prototype._initProps=function(t){for(var e in t=t||hi(this.$options,this.$name))O(t[e])||(this.$props[e]=t[e]);var n=[this.$options.computed,this.$options.methods];for(e in this.$props)e in t&&function(t,e){return t.every(function(t){return!t||!h(t,e)})}(n,e)&&(this[e]=this.$props[e])},ii.prototype._initEvents=function(){var n=this;this._events=[];var t=this.$options.events;t&&t.forEach(function(t){if(h(t,"handler"))li(n,t);else for(var e in t)li(n,t[e],e)})},ii.prototype._unbindEvents=function(){this._events.forEach(function(t){return t()}),delete this._events},ii.prototype._initObservers=function(){var t,e,n;this._observers=[(e=(t=this).$options.el,(n=new MutationObserver(function(){return t.$emit()})).observe(e,{childList:!0,subtree:!0}),n),function(e){var r=e.$name,n=e.$options,o=e.$props,t=n.attrs,i=n.props,s=n.el;if(!i||!1===t)return;var a=y(t)?t:Object.keys(i),u=a.map(function(t){return d(t)}).concat(r),c=new MutationObserver(function(t){var i=hi(n,r);t.some(function(t){var e=t.attributeName,n=e.replace("data-","");return(n===r?a:[f(n),f(e)]).some(function(t){return!O(i[t])&&i[t]!==o[t]})})&&e.$reset()});return c.observe(s,{attributes:!0,attributeFilter:u.concat(u.map(function(t){return"data-"+t}))}),c}(this)]},ii.prototype._disconnectObservers=function(){this._observers.forEach(function(t){return t&&t.disconnect()})},si=(oi=Zn).data,ai={},oi.component=function(s,t){var e=d(s);if(s=f(e),!t)return I(ai[s])&&(ai[s]=oi.extend(ai[s])),ai[s];oi[s]=function(t,n){for(var e=arguments.length,i=Array(e);e--;)i[e]=arguments[e];var r=oi.component(s);return r.options.functional?new r({data:I(t)?t:[].concat(i)}):t?Me(t).map(o)[0]:o(t);function o(t){var e=oi.getComponent(t,s);if(e){if(!n)return e;e.$destroy()}return new r({el:t,data:n})}};var n=I(t)?Y({},t):t.options;return n.name=s,n.install&&n.install(oi,n,s),oi._initialized&&!n.functional&&mn.read(function(){return oi[s]("[uk-"+e+"],[data-uk-"+e+"]")}),ai[s]=I(t)?n:t},oi.getComponents=function(t){return t&&t[si]||{}},oi.getComponent=function(t,e){return oi.getComponents(t)[e]},oi.connect=function(t){if(t[si])for(var e in t[si])t[si][e]._callConnected();for(var n=0;n<t.attributes.length;n++){var i=ui(t.attributes[n].name);i&&i in ai&&oi[i](t)}},oi.disconnect=function(t){for(var e in t[si])t[si][e]._callDisconnected()},function(i){var r=i.data;i.prototype.$create=function(t,e,n){return i[t](e,n)},i.prototype.$mount=function(t){var e=this.$options.name;t[r]||(t[r]={}),t[r][e]||((t[r][e]=this).$el=this.$options.el=this.$options.el||t,Nt(t,document)&&this._callConnected())},i.prototype.$reset=function(){this._callDisconnected(),this._callConnected()},i.prototype.$destroy=function(t){void 0===t&&(t=!1);var e=this.$options,n=e.el,i=e.name;n&&this._callDisconnected(),this._callHook("destroy"),n&&n[r]&&(delete n[r][i],D(n[r])||delete n[r],t&&ke(this.$el))},i.prototype.$emit=function(t){this._callUpdate(t)},i.prototype.$update=function(t,e){void 0===t&&(t=this.$el),i.update(t,e)},i.prototype.$getComponent=i.getComponent;var t=rt(function(t){return i.prefix+d(t)});Object.defineProperties(i.prototype,{$container:Object.getOwnPropertyDescriptor(i,"container"),$name:{get:function(){return t(this.$options.name)}}})}(Zn);var fi={connected:function(){Pe(this.$el,this.$name)||Ne(this.$el,this.$name)}},pi={props:{cls:Boolean,animation:"list",duration:Number,origin:String,transition:String},data:{cls:!1,animation:[!1],duration:200,origin:!1,transition:"linear",clsEnter:"uk-togglabe-enter",clsLeave:"uk-togglabe-leave",initProps:{overflow:"",height:"",paddingTop:"",paddingBottom:"",marginTop:"",marginBottom:""},hideProps:{overflow:"hidden",height:0,paddingTop:0,paddingBottom:0,marginTop:0,marginBottom:0}},computed:{hasAnimation:function(t){return!!t.animation[0]},hasTransition:function(t){var e=t.animation;return this.hasAnimation&&!0===e[0]}},methods:{toggleElement:function(e,s,a){var u=this;return new ce(function(t){return ce.all(W(e).map(function(t){var e=M(s)?s:!u.isToggled(t);if(!Qt(t,"before"+(e?"show":"hide"),[u]))return ce.reject();var o,n=(k(a)?a:!1!==a&&u.hasAnimation?u.hasTransition?mi(u):(o=u,function(t,e){en.cancel(t);var n=o.animation,i=o.duration,r=o._toggle;return e?(r(t,!0),en.in(t,n[0],i,o.origin)):en.out(t,n[1]||n[0],i,o.origin).then(function(){return r(t,!1)})}):u._toggle)(t,e),i=e?u.clsEnter:u.clsLeave;Ne(t,i),Qt(t,e?"show":"hide",[u]);function r(){Be(t,i),Qt(t,e?"shown":"hidden",[u]),u.$update(t)}return n?n.then(r,function(){return Be(t,i),ce.reject()}):r()})).then(t,Q)})},isToggled:function(t){return void 0===t&&(t=this.$el),!!Pe(t,this.clsEnter)||!Pe(t,this.clsLeave)&&(this.cls?Pe(t,this.cls.split(" ")[0]):!st(t,"hidden"))},_toggle:function(t,e){var n;t&&(e=Boolean(e),this.cls?(n=v(this.cls," ")||e!==Pe(t,this.cls))&&He(t,this.cls,v(this.cls," ")?void 0:e):(n=e===t.hidden)&&(t.hidden=!e),Me("[autofocus]",t).some(function(t){return $t(t)?t.focus()||!0:t.blur()}),n&&(Qt(t,"toggled",[e,this]),this.$update(t)))}}};function mi(t){var s=t.isToggled,a=t.duration,u=t.initProps,c=t.hideProps,h=t.transition,l=t._toggle;return function(t,e){var n=Je.inProgress(t),i=t.hasChildNodes?L(Ve(t.firstElementChild,"marginTop"))+L(Ve(t.lastElementChild,"marginBottom")):0,r=$t(t)?un(t)+(n?0:i):0;Je.cancel(t),s(t)||l(t,!0),un(t,""),mn.flush();var o=un(t)+(n?0:i);return un(t,r),(e?Je.start(t,Y({},u,{overflow:"hidden",height:o}),Math.round(a*(1-r/o)),h):Je.start(t,c,Math.round(a*(r/o)),h).then(function(){return l(t,!1)})).then(function(){return Ve(t,u)})}}var gi={mixins:[fi,pi],props:{targets:String,active:null,collapsible:Boolean,multiple:Boolean,toggle:String,content:String,transition:String,offset:Number},data:{targets:"> *",active:!1,animation:[!0],collapsible:!0,multiple:!1,clsOpen:"uk-open",toggle:"> .uk-accordion-title",content:"> .uk-accordion-content",transition:"ease",offset:0},computed:{items:{get:function(t,e){return Me(t.targets,e)},watch:function(t,e){var n,i=this;t.forEach(function(t){return vi(Ae(i.content,t),!Pe(t,i.clsOpen))}),e||Pe(t,this.clsOpen)||(n=!1!==this.active&&t[Number(this.active)]||!this.collapsible&&t[0])&&this.toggle(n,!1)},immediate:!0},toggles:function(t){var e=t.toggle;return this.items.map(function(t){return Ae(e,t)})}},events:[{name:"click",delegate:function(){return this.targets+" "+this.$props.toggle},handler:function(t){t.preventDefault(),this.toggle(Ot(this.toggles,t.current))}}],methods:{toggle:function(t,r){var o=this,e=[this.items[it(t,this.items)]],n=Tt(this.items,"."+this.clsOpen);this.multiple||v(n,e[0])||(e=e.concat(n)),!this.collapsible&&n.length<2&&!Tt(e,":not(."+this.clsOpen+")").length||e.forEach(function(t){return o.toggleElement(t,!Pe(t,o.clsOpen),function(e,n){He(e,o.clsOpen,n),ot(Ae(o.$props.toggle,e),"aria-expanded",n);var i=Ae((e._wrapper?"> * ":"")+o.content,e);if(!1!==r&&o.hasTransition)return e._wrapper||(e._wrapper=$e(i,"<div"+(n?" hidden":"")+">")),vi(i,!1),mi(o)(e._wrapper,n).then(function(){var t;vi(i,!n),delete e._wrapper,Ie(i),n&&(Hn(t=Ae(o.$props.toggle,e))||jn(t,{offset:o.offset}))});vi(i,!n)})})}}};function vi(t,e){t&&(t.hidden=e)}var wi={mixins:[fi,pi],args:"animation",props:{close:String},data:{animation:[!0],selClose:".uk-alert-close",duration:150,hideProps:Y({opacity:0},pi.data.hideProps)},events:[{name:"click",delegate:function(){return this.selClose},handler:function(t){t.preventDefault(),this.close()}}],methods:{close:function(){var t=this;this.toggleElement(this.$el).then(function(){return t.$destroy(!0)})}}},bi={args:"autoplay",props:{automute:Boolean,autoplay:Boolean},data:{automute:!1,autoplay:!0},computed:{inView:function(t){return"inview"===t.autoplay}},connected:function(){this.inView&&!st(this.$el,"preload")&&(this.$el.preload="none"),this.automute&&_n(this.$el)},update:{read:function(){return{visible:$t(this.$el)&&"hidden"!==Ve(this.$el,"visibility"),inView:this.inView&&Hn(this.$el)}},write:function(t){var e=t.visible,n=t.inView;!e||this.inView&&!n?Cn(this.$el):(!0===this.autoplay||this.inView&&n)&&Tn(this.$el)},events:["resize","scroll"]}},xi={mixins:[fi,bi],props:{width:Number,height:Number},data:{automute:!0},update:{read:function(){var t=this.$el,e=function(t){for(;t=Et(t);)if("static"!==Ve(t,"position"))return t}(t)||Et(t),n=e.offsetHeight,i=e.offsetWidth,r=nt.cover({width:this.width||t.naturalWidth||t.videoWidth||t.clientWidth,height:this.height||t.naturalHeight||t.videoHeight||t.clientHeight},{width:i+(i%2?1:0),height:n+(n%2?1:0)});return!(!r.width||!r.height)&&r},write:function(t){var e=t.height,n=t.width;Ve(this.$el,{height:e,width:n})},events:["resize"]}};var yi,ki={props:{pos:String,offset:null,flip:Boolean,clsPos:String},data:{pos:"bottom-"+(lt?"right":"left"),flip:!0,offset:!1,clsPos:""},computed:{pos:function(t){var e=t.pos;return(e+(v(e,"-")?"":"-center")).split("-")},dir:function(){return this.pos[0]},align:function(){return this.pos[1]}},methods:{positionAt:function(t,e,n){De(t,this.clsPos+"-(top|bottom|left|right)(-[a-z]+)?");var i,r=this.offset,o=this.getAxis();B(r)||(r=(i=Ae(r))?on(i)["x"===o?"left":"top"]-on(e)["x"===o?"right":"bottom"]:0);var s=Yn(t,e,"x"===o?dn(this.dir)+" "+this.align:this.align+" "+dn(this.dir),"x"===o?this.dir+" "+this.align:this.align+" "+this.dir,"x"===o?""+("left"===this.dir?-r:r):" "+("top"===this.dir?-r:r),null,this.flip,n).target,a=s.x,u=s.y;this.dir="x"===o?a:u,this.align="x"===o?u:a,He(t,this.clsPos+"-"+this.dir+"-"+this.align,!1===this.offset)},getAxis:function(){return"top"===this.dir||"bottom"===this.dir?"y":"x"}}},$i={mixins:[ki,pi],args:"pos",props:{mode:"list",toggle:Boolean,boundary:Boolean,boundaryAlign:Boolean,delayShow:Number,delayHide:Number,clsDrop:String},data:{mode:["click","hover"],toggle:"- *",boundary:!0,boundaryAlign:!1,delayShow:0,delayHide:800,clsDrop:!1,animation:["uk-animation-fade"],cls:"uk-open"},computed:{boundary:function(t,e){var n=t.boundary;return!0===n?window:Pt(n,e)},clsDrop:function(t){return t.clsDrop||"uk-"+this.$options.name},clsPos:function(){return this.clsDrop}},created:function(){this.tracker=new yn},connected:function(){Ne(this.$el,this.clsDrop);var t=this.$props.toggle;this.toggle=t&&this.$create("toggle",Pt(t,this.$el),{target:this.$el,mode:this.mode})},disconnected:function(){this.isActive()&&(yi=null)},events:[{name:"click",delegate:function(){return"."+this.clsDrop+"-close"},handler:function(t){t.preventDefault(),this.hide(!1)}},{name:"click",delegate:function(){return'a[href^="#"]'},handler:function(t){var e=t.defaultPrevented,n=t.current.hash;e||!n||Nt(n,this.$el)||this.hide(!1)}},{name:"beforescroll",handler:function(){this.hide(!1)}},{name:"toggle",self:!0,handler:function(t,e){t.preventDefault(),this.isToggled()?this.hide(!1):this.show(e,!1)}},{name:"toggleshow",self:!0,handler:function(t,e){t.preventDefault(),this.show(e)}},{name:"togglehide",self:!0,handler:function(t){t.preventDefault(),this.hide()}},{name:wt,filter:function(){return v(this.mode,"hover")},handler:function(t){se(t)||this.clearTimers()}},{name:bt,filter:function(){return v(this.mode,"hover")},handler:function(t){!se(t)&&t.relatedTarget&&this.hide()}},{name:"toggled",self:!0,handler:function(t,e){e&&(this.clearTimers(),this.position())}},{name:"show",self:!0,handler:function(){var o=this;(yi=this).tracker.init(),Zt(this.$el,"hide",Kt(document,mt,function(t){var r=t.target;return!Nt(r,o.$el)&&Zt(document,vt+" "+xt+" scroll",function(t){var e=t.defaultPrevented,n=t.type,i=t.target;e||n!==vt||r!==i||o.toggle&&Nt(r,o.toggle.$el)||o.hide(!1)},!0)}),{self:!0}),Zt(this.$el,"hide",Kt(document,"keydown",function(t){27===t.keyCode&&o.hide(!1)}),{self:!0})}},{name:"beforehide",self:!0,handler:function(){this.clearTimers()}},{name:"hide",handler:function(t){var e=t.target;this.$el===e?(yi=this.isActive()?null:yi,this.tracker.cancel()):yi=null===yi&&Nt(e,this.$el)&&this.isToggled()?this:yi}}],update:{write:function(){this.isToggled()&&!Pe(this.$el,this.clsEnter)&&this.position()},events:["resize"]},methods:{show:function(t,e){var n,i=this;if(void 0===t&&(t=this.toggle),void 0===e&&(e=!0),this.isToggled()&&t&&this.toggle&&t.$el!==this.toggle.$el&&this.hide(!1),this.toggle=t,this.clearTimers(),!this.isActive()){if(yi){if(e&&yi.isDelaying)return void(this.showTimer=setTimeout(this.show,10));for(;yi&&n!==yi&&!Nt(this.$el,yi.$el);)(n=yi).hide(!1)}this.showTimer=setTimeout(function(){return!i.isToggled()&&i.toggleElement(i.$el,!0)},e&&this.delayShow||0)}},hide:function(t){var e=this;void 0===t&&(t=!0);function n(){return e.toggleElement(e.$el,!1,!1)}var i,r;this.clearTimers(),this.isDelaying=(i=this.$el,r=[],_e(i,function(t){return"static"!==Ve(t,"position")&&r.push(t)}),r.some(function(t){return e.tracker.movesTo(t)})),t&&this.isDelaying?this.hideTimer=setTimeout(this.hide,50):t&&this.delayHide?this.hideTimer=setTimeout(n,this.delayHide):n()},clearTimers:function(){clearTimeout(this.showTimer),clearTimeout(this.hideTimer),this.showTimer=null,this.hideTimer=null,this.isDelaying=!1},isActive:function(){return yi===this},position:function(){Be(this.$el,this.clsDrop+"-stack"),He(this.$el,this.clsDrop+"-boundary",this.boundaryAlign);var t,e=on(this.boundary),n=this.boundaryAlign?e:on(this.toggle.$el);"justify"===this.align?(t="y"===this.getAxis()?"width":"height",Ve(this.$el,t,n[t])):this.boundary&&this.$el.offsetWidth>Math.max(e.right-n.left,n.right-e.left)&&Ne(this.$el,this.clsDrop+"-stack"),this.positionAt(this.$el,this.boundaryAlign?this.boundary:this.toggle.$el,this.boundary)}}};var Si={mixins:[fi],args:"target",props:{target:Boolean},data:{target:!1},computed:{input:function(t,e){return Ae(St,e)},state:function(){return this.input.nextElementSibling},target:function(t,e){var n=t.target;return n&&(!0===n&&Et(this.input)===e&&this.input.nextElementSibling||Pt(n,e))}},update:function(){var t,e,n,i=this.target,r=this.input;!i||i[e=It(i)?"value":"textContent"]!==(n=r.files&&r.files[0]?r.files[0].name:At(r,"select")&&(t=Me("option",r).filter(function(t){return t.selected})[0])?t.textContent:r.value)&&(i[e]=n)},events:[{name:"change",handler:function(){this.$update()}},{name:"reset",el:function(){return zt(this.$el,"form")},handler:function(){this.$update()}}]},Ii={update:{read:function(t){var e=Hn(this.$el);if(!e||t.isInView===e)return!1;t.isInView=e},write:function(){this.$el.src=""+this.$el.src},events:["scroll","resize"]}},Ei={props:{margin:String,firstColumn:Boolean},data:{margin:"uk-margin-small-top",firstColumn:"uk-first-column"},update:{read:function(){var t=Ti(this.$el.children);return{rows:t,columns:function(t){for(var e=[],n=0;n<t.length;n++)for(var i=Ci(t[n],"left","right"),r=0;r<i.length;r++)e[r]=e[r]?e[r].concat(i[r]):i[r];return lt?e.reverse():e}(t)}},write:function(t){for(var e=t.columns,n=t.rows,i=0;i<n.length;i++)for(var r=0;r<n[i].length;r++)He(n[i][r],this.margin,0!==i),He(n[i][r],this.firstColumn,!!~e[0].indexOf(n[i][r]))},events:["resize"]}};function Ti(t){return Ci(t,"top","bottom")}function Ci(t,e,n){for(var i=[[]],r=0;r<t.length;r++){var o=t[r];if($t(o))for(var s=_i(o),a=i.length-1;0<=a;a--){var u=i[a];if(!u[0]){u.push(o);break}var c=void 0,c=u[0].offsetParent===o.offsetParent?_i(u[0]):(s=_i(o,!0),_i(u[0],!0));if(s[e]>=c[n]-1&&s[e]!==c[e]){i.push([o]);break}if(s[n]-1>c[e]||s[e]===c[e]){u.push(o);break}if(0===a){i.unshift([o]);break}}}return i}function _i(t,e){var n;void 0===e&&(e=!1);var i=t.offsetTop,r=t.offsetLeft,o=t.offsetHeight,s=t.offsetWidth;return e&&(i=(n=an(t))[0],r=n[1]),{top:i,left:r,bottom:i+o,right:r+s}}var Ai={extends:Ei,mixins:[fi],name:"grid",props:{masonry:Boolean,parallax:Number},data:{margin:"uk-grid-margin",clsStack:"uk-grid-stack",masonry:!1,parallax:0},connected:function(){this.masonry&&Ne(this.$el,"uk-flex-top uk-flex-wrap-top")},update:[{write:function(t){var e=t.columns;He(this.$el,this.clsStack,e.length<2)},events:["resize"]},{read:function(t){var e=t.columns,n=t.rows;if(!e.length||!this.masonry&&!this.parallax||Mi(this.$el))return t.translates=!1;var i,r,o,s,a,u=!1,c=Dt(this.$el),h=e.map(function(t){return t.reduce(function(t,e){return t+e.offsetHeight},0)}),l=(i=c,r=this.margin,L((o=i.filter(function(t){return Pe(t,r)})[0])?Ve(o,"marginTop"):Ve(i[0],"paddingLeft"))*(n.length-1)),d=Math.max.apply(Math,h)+l;this.masonry&&(e=e.map(function(t){return K(t,"offsetTop")}),s=e,a=n.map(function(t){return Math.max.apply(Math,t.map(function(t){return t.offsetHeight}))}),u=s.map(function(n){var i=0;return n.map(function(t,e){return i+=e?a[e-1]-n[e-1].offsetHeight:0})}));var f=Math.abs(this.parallax);return{padding:f=f&&h.reduce(function(t,e,n){return Math.max(t,e+l+(n%2?f:f/8)-d)},0),columns:e,translates:u,height:u?d:""}},write:function(t){var e=t.height,n=t.padding;Ve(this.$el,"paddingBottom",n||""),!1!==e&&Ve(this.$el,"height",e)},events:["resize"]},{read:function(t){var e=t.height;return!Mi(this.$el)&&{scrolled:!!this.parallax&&Fn(this.$el,e?e-un(this.$el):0)*Math.abs(this.parallax)}},write:function(t){var e=t.columns,i=t.scrolled,r=t.translates;!1===i&&!r||e.forEach(function(t,n){return t.forEach(function(t,e){return Ve(t,"transform",i||r?"translateY("+((r&&-r[n][e])+(i?n%2?i:i/8:0))+"px)":"")})})},events:["scroll","resize"]}]};function Mi(t){return Dt(t).some(function(t){return"absolute"===Ve(t,"position")})}var zi=ht?{props:{selMinHeight:String},data:{selMinHeight:!1,forceHeight:!1},computed:{elements:function(t,e){var n=t.selMinHeight;return n?Me(n,e):[e]}},update:[{read:function(){Ve(this.elements,"height","")},order:-5,events:["resize"]},{write:function(){var n=this;this.elements.forEach(function(t){var e=L(Ve(t,"minHeight"));e&&(n.forceHeight||Math.round(e+ln(t,"height","content-box"))>=t.offsetHeight)&&Ve(t,"height",e)})},order:5,events:["resize"]}]}:{},Ni={mixins:[zi],args:"target",props:{target:String,row:Boolean},data:{target:"> *",row:!0,forceHeight:!0},computed:{elements:function(t,e){return Me(t.target,e)}},update:{read:function(){return{rows:(this.row?Ti(this.elements):[this.elements]).map(Bi)}},write:function(t){t.rows.forEach(function(t){var n=t.heights;return t.elements.forEach(function(t,e){return Ve(t,"minHeight",n[e])})})},events:["resize"]}};function Bi(t){if(t.length<2)return{heights:[""],elements:t};var n=t.map(Di),i=Math.max.apply(Math,n),e=t.some(function(t){return t.style.minHeight}),r=t.some(function(t,e){return!t.style.minHeight&&n[e]<i});return e&&r&&(Ve(t,"minHeight",""),n=t.map(Di),i=Math.max.apply(Math,n)),{heights:n=t.map(function(t,e){return n[e]===i&&L(t.style.minHeight).toFixed(2)!==i.toFixed(2)?"":i}),elements:t}}function Di(t){var e=!1;$t(t)||(e=t.style.display,Ve(t,"display","block","important"));var n=rn(t).height-ln(t,"height","content-box");return!1!==e&&Ve(t,"display",e),n}var Oi={mixins:[zi],props:{expand:Boolean,offsetTop:Boolean,offsetBottom:Boolean,minHeight:Number},data:{expand:!1,offsetTop:!1,offsetBottom:!1,minHeight:0},update:{read:function(t){var e=t.minHeight;if(!$t(this.$el))return!1;var n,i="",r=ln(this.$el,"height","content-box");return this.expand?i=un(window)-(rn(document.documentElement).height-rn(this.$el).height)-r||"":(i="calc(100vh",this.offsetTop&&(i+=0<(n=on(this.$el).top)&&n<un(window)/2?" - "+n+"px":""),!0===this.offsetBottom?i+=" - "+rn(this.$el.nextElementSibling).height+"px":B(this.offsetBottom)?i+=" - "+this.offsetBottom+"vh":this.offsetBottom&&u(this.offsetBottom,"px")?i+=" - "+L(this.offsetBottom)+"px":z(this.offsetBottom)&&(i+=" - "+rn(Pt(this.offsetBottom,this.$el)).height+"px"),i+=(r?" - "+r+"px":"")+")"),{minHeight:i,prev:e}},write:function(t){var e=t.minHeight,n=t.prev;Ve(this.$el,{minHeight:e}),e!==n&&this.$update(this.$el,"resize"),this.minHeight&&L(Ve(this.$el,"minHeight"))<this.minHeight&&Ve(this.$el,"minHeight",this.minHeight)},events:["resize"]}},Pi={args:"src",props:{id:Boolean,icon:String,src:String,style:String,width:Number,height:Number,ratio:Number,class:String,strokeAnimation:Boolean,focusable:Boolean,attributes:"list"},data:{ratio:1,include:["style","class","focusable"],class:"",strokeAnimation:!1},beforeConnect:function(){this.class+=" uk-svg"},connected:function(){var t,n=this;!this.icon&&v(this.src,"#")&&(t=this.src.split("#"),this.src=t[0],this.icon=t[1]),this.svg=this.getSvg().then(function(t){if(n._connected){var e=function(t,e){if(kt(e)||"CANVAS"===e.tagName){e.hidden=!0;var n=e.nextElementSibling;return Wi(t,n)?n:xe(e,t)}var i=e.lastElementChild;return Wi(t,i)?i:we(e,t)}(t,n.$el);return n.svgEl&&e!==n.svgEl&&ke(n.svgEl),n.applyAttributes(e,t),n.$emit(),n.svgEl=e}},Q)},disconnected:function(){var e=this;this.svg.then(function(t){e._connected||(kt(e.$el)&&(e.$el.hidden=!1),ke(t),e.svgEl=null)}),this.svg=null},update:{read:function(){return!!(this.strokeAnimation&&this.svgEl&&$t(this.svgEl))},write:function(){var t,e;t=this.svgEl,(e=Fi(t))&&t.style.setProperty("--uk-animation-stroke",e)},type:["resize"]},methods:{getSvg:function(){var e=this;return Hi(this.src).then(function(t){return function(t,e){e&&v(t,"<symbol")&&(t=function(t,e){if(!ji[t]){var n;for(ji[t]={},Li.lastIndex=0;n=Li.exec(t);)ji[t][n[3]]='<svg xmlns="http://www.w3.org/2000/svg"'+n[1]+"svg>"}return ji[t][e]}(t,e)||t);return(t=Ae(t.substr(t.indexOf("<svg"))))&&t.hasChildNodes()&&t}(t,e.icon)||ce.reject("SVG not found.")})},applyAttributes:function(n,e){var t,i,r=this;for(t in this.$options.props)v(this.include,t)&&t in this&&ot(n,t,this[t]);for(i in this.attributes){var o=this.attributes[i].split(":",2),s=o[0],a=o[1];ot(n,s,a)}this.id||at(n,"id");var u=["width","height"],c=u.map(function(t){return r[t]});c.some(function(t){return t})||(c=u.map(function(t){return ot(e,t)}));var h=ot(e,"viewBox");h&&!c.some(function(t){return t})&&(c=h.split(" ").slice(2)),c.forEach(function(t,e){return ot(n,u[e],L(t)*r.ratio||null)})}}},Hi=rt(function(n){return new ce(function(e,t){n?w(n,"data:")?e(decodeURIComponent(n.split(",")[1])):pe(n).then(function(t){return e(t.response)},function(){return t("SVG not found.")}):t()})});var Li=/<symbol([^]*?id=(['"])(.+?)\2[^]*?<\/)symbol>/g,ji={};function Fi(t){return Math.ceil(Math.max.apply(Math,[0].concat(Me("[stroke]",t).map(function(t){try{return t.getTotalLength()}catch(t){return 0}}))))}function Wi(t,e){return Vi(t)&&Vi(e)&&Ri(t)===Ri(e)}function Vi(t){return t&&"svg"===t.tagName}function Ri(t){return(t.innerHTML||(new XMLSerializer).serializeToString(t).replace(/<svg.*?>(.*?)<\/svg>/g,"$1")).replace(/\s/g,"")}var qi={spinner:'<svg width="30" height="30" viewBox="0 0 30 30" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" cx="15" cy="15" r="14"/></svg>',totop:'<svg width="18" height="10" viewBox="0 0 18 10" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.2" points="1 9 9 1 17 9 "/></svg>',marker:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect x="9" y="4" width="1" height="11"/><rect x="4" y="9" width="11" height="1"/></svg>',"close-icon":'<svg width="14" height="14" viewBox="0 0 14 14" xmlns="http://www.w3.org/2000/svg"><line fill="none" stroke="#000" stroke-width="1.1" x1="1" y1="1" x2="13" y2="13"/><line fill="none" stroke="#000" stroke-width="1.1" x1="13" y1="1" x2="1" y2="13"/></svg>',"close-large":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><line fill="none" stroke="#000" stroke-width="1.4" x1="1" y1="1" x2="19" y2="19"/><line fill="none" stroke="#000" stroke-width="1.4" x1="19" y1="1" x2="1" y2="19"/></svg>',"navbar-toggle-icon":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect y="9" width="20" height="2"/><rect y="3" width="20" height="2"/><rect y="15" width="20" height="2"/></svg>',"overlay-icon":'<svg width="40" height="40" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg"><rect x="19" y="0" width="1" height="40"/><rect x="0" y="19" width="40" height="1"/></svg>',"pagination-next":'<svg width="7" height="12" viewBox="0 0 7 12" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.2" points="1 1 6 6 1 11"/></svg>',"pagination-previous":'<svg width="7" height="12" viewBox="0 0 7 12" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.2" points="6 1 1 6 6 11"/></svg>',"search-icon":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.1" cx="9" cy="9" r="7"/><path fill="none" stroke="#000" stroke-width="1.1" d="M14,14 L18,18 L14,14 Z"/></svg>',"search-large":'<svg width="40" height="40" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.8" cx="17.5" cy="17.5" r="16.5"/><line fill="none" stroke="#000" stroke-width="1.8" x1="38" y1="39" x2="29" y2="30"/></svg>',"search-navbar":'<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.1" cx="10.5" cy="10.5" r="9.5"/><line fill="none" stroke="#000" stroke-width="1.1" x1="23" y1="23" x2="17" y2="17"/></svg>',"slidenav-next":'<svg width="14" height="24" viewBox="0 0 14 24" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.4" points="1.225,23 12.775,12 1.225,1 "/></svg>',"slidenav-next-large":'<svg width="25" height="40" viewBox="0 0 25 40" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="2" points="4.002,38.547 22.527,20.024 4,1.5 "/></svg>',"slidenav-previous":'<svg width="14" height="24" viewBox="0 0 14 24" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.4" points="12.775,1 1.225,12 12.775,23 "/></svg>',"slidenav-previous-large":'<svg width="25" height="40" viewBox="0 0 25 40" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="2" points="20.527,1.5 2,20.024 20.525,38.547 "/></svg>'},Ui={install:function(r){r.icon.add=function(t,e){var n,i=z(t)?((n={})[t]=e,n):t;G(i,function(t,e){qi[e]=t,delete Zi[e]}),r._initialized&&_e(document.body,function(t){return G(r.getComponents(t),function(t){t.$options.isIcon&&t.icon in i&&t.$reset()})})}},extends:Pi,args:"icon",props:["icon"],data:{include:["focusable"]},isIcon:!0,beforeConnect:function(){Ne(this.$el,"uk-icon")},methods:{getSvg:function(){var t=function(t){if(!qi[t])return null;Zi[t]||(Zi[t]=Ae((qi[function(t){return lt?U(U(t,"left","right"),"previous","next"):t}(t)]||qi[t]).trim()));return Zi[t].cloneNode(!0)}(this.icon);return t?ce.resolve(t):ce.reject("Icon not found.")}}},Yi={args:!1,extends:Ui,data:function(t){return{icon:d(t.constructor.options.name)}},beforeConnect:function(){Ne(this.$el,this.$name)}},Xi={extends:Yi,beforeConnect:function(){Ne(this.$el,"uk-slidenav")},computed:{icon:function(t,e){var n=t.icon;return Pe(e,"uk-slidenav-large")?n+"-large":n}}},Gi={extends:Yi,computed:{icon:function(t,e){var n=t.icon;return Pe(e,"uk-search-icon")&&Bt(e,".uk-search-large").length?"search-large":Bt(e,".uk-search-navbar").length?"search-navbar":n}}},Ki={extends:Yi,computed:{icon:function(){return"close-"+(Pe(this.$el,"uk-close-large")?"large":"icon")}}},Ji={extends:Yi,connected:function(){var e=this;this.svg.then(function(t){return t&&1!==e.ratio&&Ve(Ae("circle",t),"strokeWidth",1/e.ratio)})}},Zi={};var Qi={args:"dataSrc",props:{dataSrc:String,dataSrcset:Boolean,sizes:String,width:Number,height:Number,offsetTop:String,offsetLeft:String,target:String},data:{dataSrc:"",dataSrcset:!1,sizes:!1,width:!1,height:!1,offsetTop:"50vh",offsetLeft:"50vw",target:!1},computed:{cacheKey:function(t){var e=t.dataSrc;return this.$name+"."+e},width:function(t){var e=t.width,n=t.dataWidth;return e||n},height:function(t){var e=t.height,n=t.dataHeight;return e||n},sizes:function(t){var e=t.sizes,n=t.dataSizes;return e||n},isImg:function(t,e){return sr(e)},target:{get:function(t){var e=t.target;return[this.$el].concat(Ht(e,this.$el))},watch:function(){this.observe()}},offsetTop:function(t){return fn(t.offsetTop,"height")},offsetLeft:function(t){return fn(t.offsetLeft,"width")}},connected:function(){window.IntersectionObserver?(ur[this.cacheKey]?tr(this.$el,ur[this.cacheKey],this.dataSrcset,this.sizes):this.isImg&&this.width&&this.height&&tr(this.$el,function(t,e,n){var i;n&&(i=nt.ratio({width:t,height:e},"width",fn(nr(n))),t=i.width,e=i.height);return'data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="'+t+'" height="'+e+'"></svg>'}(this.width,this.height,this.sizes)),this.observer=new IntersectionObserver(this.load,{rootMargin:this.offsetTop+"px "+this.offsetLeft+"px"}),requestAnimationFrame(this.observe)):tr(this.$el,this.dataSrc,this.dataSrcset,this.sizes)},disconnected:function(){this.observer&&this.observer.disconnect()},update:{read:function(t){var e=this,n=t.image;return!!this.observer&&(n||"complete"!==document.readyState||this.load(this.observer.takeRecords()),!this.isImg&&void(n&&n.then(function(t){return t&&""!==t.currentSrc&&tr(e.$el,ar(t))})))},write:function(t){var e,n,i,r,o;this.dataSrcset&&1!==window.devicePixelRatio&&(!(e=Ve(this.$el,"backgroundSize")).match(/^(auto\s?)+$/)&&L(e)!==t.bgSize||(t.bgSize=(n=this.dataSrcset,i=this.sizes,r=fn(nr(i)),(o=(n.match(or)||[]).map(L).sort(function(t,e){return t-e})).filter(function(t){return r<=t})[0]||o.pop()||""),Ve(this.$el,"backgroundSize",t.bgSize+"px")))},events:["resize"]},methods:{load:function(t){var e=this;t.some(function(t){return O(t.isIntersecting)||t.isIntersecting})&&(this._data.image=me(this.dataSrc,this.dataSrcset,this.sizes).then(function(t){return tr(e.$el,ar(t),t.srcset,t.sizes),ur[e.cacheKey]=ar(t),t},function(t){return Qt(e.$el,new t.constructor(t.type,t))}),this.observer.disconnect())},observe:function(){var e=this;this._connected&&!this._data.image&&this.target.forEach(function(t){return e.observer.observe(t)})}}};function tr(t,e,n,i){sr(t)?(i&&(t.sizes=i),n&&(t.srcset=n),e&&(t.src=e)):e&&!v(t.style.backgroundImage,e)&&(Ve(t,"backgroundImage","url("+Gt(e)+")"),Qt(t,te("load",!1)))}var er=/\s*(.*?)\s*(\w+|calc\(.*?\))\s*(?:,|$)/g;function nr(t){var e,n;for(er.lastIndex=0;e=er.exec(t);)if(!e[1]||window.matchMedia(e[1]).matches){e=w(n=e[2],"calc")?n.slice(5,-1).replace(ir,function(t){return fn(t)}).replace(/ /g,"").match(rr).reduce(function(t,e){return t+ +e},0):n;break}return e||"100vw"}var ir=/\d+(?:\w+|%)/g,rr=/[+-]?(\d+)/g;var or=/\s+\d+w\s*(?:,|$)/g;function sr(t){return"IMG"===t.tagName}function ar(t){return t.currentSrc||t.src}var ur,cr="__test__";try{(ur=window.sessionStorage||{})[cr]=1,delete ur[cr]}catch(t){ur={}}var hr={props:{media:Boolean},data:{media:!1},computed:{matchMedia:function(){var t=function(t){if(z(t)){if("@"===t[0])t=L(Ye("breakpoint-"+t.substr(1)));else if(isNaN(t))return t}return!(!t||isNaN(t))&&"(min-width: "+t+"px)"}(this.media);return!t||window.matchMedia(t).matches}}};var lr={mixins:[fi,hr],props:{fill:String},data:{fill:"",clsWrapper:"uk-leader-fill",clsHide:"uk-leader-hide",attrFill:"data-fill"},computed:{fill:function(t){return t.fill||Ye("leader-fill-content")}},connected:function(){var t=Se(this.$el,'<span class="'+this.clsWrapper+'">');this.wrapper=t[0]},disconnected:function(){Ie(this.wrapper.childNodes)},update:{read:function(t){var e=t.changed,n=t.width,i=n;return{width:n=Math.floor(this.$el.offsetWidth/2),fill:this.fill,changed:e||i!==n,hide:!this.matchMedia}},write:function(t){He(this.wrapper,this.clsHide,t.hide),t.changed&&(t.changed=!1,ot(this.wrapper,this.attrFill,new Array(t.width).join(t.fill)))},events:["resize"]}},dr={props:{container:Boolean},data:{container:!0},computed:{container:function(t){var e=t.container;return!0===e&&this.$container||e&&Ae(e)}}},fr=[],pr={mixins:[fi,dr,pi],props:{selPanel:String,selClose:String,escClose:Boolean,bgClose:Boolean,stack:Boolean},data:{cls:"uk-open",escClose:!0,bgClose:!0,overlay:!0,stack:!1},computed:{panel:function(t,e){return Ae(t.selPanel,e)},transitionElement:function(){return this.panel},bgClose:function(t){return t.bgClose&&this.panel}},beforeDisconnect:function(){this.isToggled()&&this.toggleElement(this.$el,!1,!1)},events:[{name:"click",delegate:function(){return this.selClose},handler:function(t){t.preventDefault(),this.hide()}},{name:"toggle",self:!0,handler:function(t){t.defaultPrevented||(t.preventDefault(),this.isToggled()===v(fr,this)&&this.toggle())}},{name:"beforeshow",self:!0,handler:function(t){if(v(fr,this))return!1;!this.stack&&fr.length?(ce.all(fr.map(function(t){return t.hide()})).then(this.show),t.preventDefault()):fr.push(this)}},{name:"show",self:!0,handler:function(){var o=this;cn(window)-cn(document)&&this.overlay&&Ve(document.body,"overflowY","scroll"),this.stack&&Ve(this.$el,"zIndex",L(Ve(this.$el,"zIndex"))+fr.length),Ne(document.documentElement,this.clsPage),this.bgClose&&Zt(this.$el,"hide",Kt(document,mt,function(t){var r=t.target;X(fr)!==o||o.overlay&&!Nt(r,o.$el)||Nt(r,o.panel)||Zt(document,vt+" "+xt+" scroll",function(t){var e=t.defaultPrevented,n=t.type,i=t.target;e||n!==vt||r!==i||o.hide()},!0)}),{self:!0}),this.escClose&&Zt(this.$el,"hide",Kt(document,"keydown",function(t){27===t.keyCode&&X(fr)===o&&o.hide()}),{self:!0})}},{name:"hidden",self:!0,handler:function(){var e=this;v(fr,this)&&fr.splice(fr.indexOf(this),1),fr.length||Ve(document.body,"overflowY",""),Ve(this.$el,"zIndex",""),fr.some(function(t){return t.clsPage===e.clsPage})||Be(document.documentElement,this.clsPage)}}],methods:{toggle:function(){return this.isToggled()?this.hide():this.show()},show:function(){var e=this;return this.container&&Et(this.$el)!==this.container?(we(this.container,this.$el),new ce(function(t){return requestAnimationFrame(function(){return e.show().then(t)})})):this.toggleElement(this.$el,!0,mr(this))},hide:function(){return this.toggleElement(this.$el,!1,mr(this))}}};function mr(t){var s=t.transitionElement,a=t._toggle;return function(r,o){return new ce(function(n,i){return Zt(r,"show hide",function(){r._reject&&r._reject(),r._reject=i,a(r,o);var t=Zt(s,"transitionstart",function(){Zt(s,"transitionend transitioncancel",n,{self:!0}),clearTimeout(e)},{self:!0}),e=setTimeout(function(){t(),n()},R(Ve(s,"transitionDuration")))})}).then(function(){return delete r._reject})}}var gr={install:function(t){var a=t.modal;function e(t,e,n,i){e=Y({bgClose:!1,escClose:!0,labels:a.labels},e);var r=a.dialog(t(e),e),o=new ue,s=!1;return Kt(r.$el,"submit","form",function(t){t.preventDefault(),o.resolve(i&&i(r)),s=!0,r.hide()}),Kt(r.$el,"hide",function(){return!s&&n(o)}),o.promise.dialog=r,o.promise}a.dialog=function(t,e){var n=a('<div class="uk-modal"> <div class="uk-modal-dialog">'+t+"</div> </div>",e);return n.show(),Kt(n.$el,"hidden",function(){return ce.resolve().then(function(){return n.$destroy(!0)})},{self:!0}),n},a.alert=function(n,t){return e(function(t){var e=t.labels;return'<div class="uk-modal-body">'+(z(n)?n:ve(n))+'</div> <div class="uk-modal-footer uk-text-right"> <button class="uk-button uk-button-primary uk-modal-close" autofocus>'+e.ok+"</button> </div>"},t,function(t){return t.resolve()})},a.confirm=function(n,t){return e(function(t){var e=t.labels;return'<form> <div class="uk-modal-body">'+(z(n)?n:ve(n))+'</div> <div class="uk-modal-footer uk-text-right"> <button class="uk-button uk-button-default uk-modal-close" type="button">'+e.cancel+'</button> <button class="uk-button uk-button-primary" autofocus>'+e.ok+"</button> </div> </form>"},t,function(t){return t.reject()})},a.prompt=function(n,i,t){return e(function(t){var e=t.labels;return'<form class="uk-form-stacked"> <div class="uk-modal-body"> <label>'+(z(n)?n:ve(n))+'</label> <input class="uk-input" value="'+(i||"")+'" autofocus> </div> <div class="uk-modal-footer uk-text-right"> <button class="uk-button uk-button-default uk-modal-close" type="button">'+e.cancel+'</button> <button class="uk-button uk-button-primary">'+e.ok+"</button> </div> </form>"},t,function(t){return t.resolve(null)},function(t){return Ae("input",t.$el).value})},a.labels={ok:"Ok",cancel:"Cancel"}},mixins:[pr],data:{clsPage:"uk-modal-page",selPanel:".uk-modal-dialog",selClose:".uk-modal-close, .uk-modal-close-default, .uk-modal-close-outside, .uk-modal-close-full"},events:[{name:"show",self:!0,handler:function(){Pe(this.panel,"uk-margin-auto-vertical")?Ne(this.$el,"uk-flex"):Ve(this.$el,"display","block"),un(this.$el)}},{name:"hidden",self:!0,handler:function(){Ve(this.$el,"display",""),Be(this.$el,"uk-flex")}}]};var vr={extends:gi,data:{targets:"> .uk-parent",toggle:"> a",content:"> ul"}},wr={mixins:[fi,zi],props:{dropdown:String,mode:"list",align:String,offset:Number,boundary:Boolean,boundaryAlign:Boolean,clsDrop:String,delayShow:Number,delayHide:Number,dropbar:Boolean,dropbarMode:String,dropbarAnchor:Boolean,duration:Number},data:{dropdown:".uk-navbar-nav > li",align:lt?"right":"left",clsDrop:"uk-navbar-dropdown",mode:void 0,offset:void 0,delayShow:void 0,delayHide:void 0,boundaryAlign:void 0,flip:"x",boundary:!0,dropbar:!1,dropbarMode:"slide",dropbarAnchor:!1,duration:200,forceHeight:!0,selMinHeight:".uk-navbar-nav > li > a, .uk-navbar-item, .uk-navbar-toggle"},computed:{boundary:function(t,e){var n=t.boundary,i=t.boundaryAlign;return!0===n||i?e:n},dropbarAnchor:function(t,e){return Pt(t.dropbarAnchor,e)},pos:function(t){return"bottom-"+t.align},dropbar:{get:function(t){var e=t.dropbar;return e?(e=this._dropbar||Pt(e,this.$el)||Ae("+ .uk-navbar-dropbar",this.$el))||(this._dropbar=Ae("<div></div>")):null},watch:function(t){Ne(t,"uk-navbar-dropbar")},immediate:!0},dropdowns:{get:function(t,e){return Me(t.dropdown+" ."+t.clsDrop,e)},watch:function(t){var e=this;this.$create("drop",t.filter(function(t){return!e.getDropdown(t)}),Y({},this.$props,{boundary:this.boundary,pos:this.pos,offset:this.dropbar||this.offset}))},immediate:!0}},disconnected:function(){this.dropbar&&ke(this.dropbar),delete this._dropbar},events:[{name:"mouseover",delegate:function(){return this.dropdown},handler:function(t){var e=t.current,n=this.getActive();n&&n.toggle&&!Nt(n.toggle.$el,e)&&!n.tracker.movesTo(n.$el)&&n.hide(!1)}},{name:"mouseleave",el:function(){return this.dropbar},handler:function(){var t=this.getActive();t&&!this.dropdowns.some(function(t){return At(t,":hover")})&&t.hide()}},{name:"beforeshow",capture:!0,filter:function(){return this.dropbar},handler:function(){Et(this.dropbar)||xe(this.dropbarAnchor||this.$el,this.dropbar)}},{name:"show",filter:function(){return this.dropbar},handler:function(t,e){var n=e.$el,i=e.dir;Pe(n,this.clsDrop)&&("slide"===this.dropbarMode&&Ne(this.dropbar,"uk-navbar-dropbar-slide"),this.clsDrop&&Ne(n,this.clsDrop+"-dropbar"),"bottom"===i&&this.transitionTo(n.offsetHeight+L(Ve(n,"marginTop"))+L(Ve(n,"marginBottom")),n))}},{name:"beforehide",filter:function(){return this.dropbar},handler:function(t,e){var n=e.$el,i=this.getActive();At(this.dropbar,":hover")&&i&&i.$el===n&&t.preventDefault()}},{name:"hide",filter:function(){return this.dropbar},handler:function(t,e){var n,i=e.$el;!Pe(i,this.clsDrop)||(!(n=this.getActive())||n&&n.$el===i)&&this.transitionTo(0)}}],methods:{getActive:function(){var t=this.dropdowns.map(this.getDropdown).filter(function(t){return t&&t.isActive()})[0];return t&&v(t.mode,"hover")&&Nt(t.toggle.$el,this.$el)&&t},transitionTo:function(t,e){var n=this,i=this.dropbar,r=$t(i)?un(i):0;return Ve(e=r<t&&e,"clip","rect(0,"+e.offsetWidth+"px,"+r+"px,0)"),un(i,r),Je.cancel([e,i]),ce.all([Je.start(i,{height:t},this.duration),Je.start(e,{clip:"rect(0,"+e.offsetWidth+"px,"+t+"px,0)"},this.duration)]).catch(Q).then(function(){Ve(e,{clip:""}),n.$update(i)})},getDropdown:function(t){return this.$getComponent(t,"drop")||this.$getComponent(t,"dropdown")}}},br={mixins:[pr],args:"mode",props:{mode:String,flip:Boolean,overlay:Boolean},data:{mode:"slide",flip:!1,overlay:!1,clsPage:"uk-offcanvas-page",clsContainer:"uk-offcanvas-container",selPanel:".uk-offcanvas-bar",clsFlip:"uk-offcanvas-flip",clsContainerAnimation:"uk-offcanvas-container-animation",clsSidebarAnimation:"uk-offcanvas-bar-animation",clsMode:"uk-offcanvas",clsOverlay:"uk-offcanvas-overlay",selClose:".uk-offcanvas-close",container:!1},computed:{clsFlip:function(t){var e=t.flip,n=t.clsFlip;return e?n:""},clsOverlay:function(t){var e=t.overlay,n=t.clsOverlay;return e?n:""},clsMode:function(t){var e=t.mode;return t.clsMode+"-"+e},clsSidebarAnimation:function(t){var e=t.mode,n=t.clsSidebarAnimation;return"none"===e||"reveal"===e?"":n},clsContainerAnimation:function(t){var e=t.mode,n=t.clsContainerAnimation;return"push"!==e&&"reveal"!==e?"":n},transitionElement:function(t){return"reveal"===t.mode?Et(this.panel):this.panel}},update:{read:function(){this.isToggled()&&!$t(this.$el)&&this.hide()},events:["resize"]},events:[{name:"click",delegate:function(){return'a[href^="#"]'},handler:function(t){var e=t.current.hash;!t.defaultPrevented&&e&&Ae(e,document.body)&&this.hide()}},{name:"touchstart",passive:!0,el:function(){return this.panel},handler:function(t){var e=t.targetTouches;1===e.length&&(this.clientY=e[0].clientY)}},{name:"touchmove",self:!0,passive:!1,filter:function(){return this.overlay},handler:function(t){t.cancelable&&t.preventDefault()}},{name:"touchmove",passive:!1,el:function(){return this.panel},handler:function(t){var e,n,i,r,o;1===t.targetTouches.length&&(e=event.targetTouches[0].clientY-this.clientY,i=(n=this.panel).scrollTop,((r=n.scrollHeight)<=(o=n.clientHeight)||0===i&&0<e||r-i<=o&&e<0)&&t.cancelable&&t.preventDefault())}},{name:"show",self:!0,handler:function(){"reveal"!==this.mode||Pe(Et(this.panel),this.clsMode)||($e(this.panel,"<div>"),Ne(Et(this.panel),this.clsMode)),Ve(document.documentElement,"overflowY",this.overlay?"hidden":""),Ne(document.body,this.clsContainer,this.clsFlip),Ve(document.body,"touch-action","pan-y pinch-zoom"),Ve(this.$el,"display","block"),Ne(this.$el,this.clsOverlay),Ne(this.panel,this.clsSidebarAnimation,"reveal"!==this.mode?this.clsMode:""),un(document.body),Ne(document.body,this.clsContainerAnimation),this.clsContainerAnimation&&(xr().content+=",user-scalable=0")}},{name:"hide",self:!0,handler:function(){Be(document.body,this.clsContainerAnimation),Ve(document.body,"touch-action","")}},{name:"hidden",self:!0,handler:function(){var t;this.clsContainerAnimation&&((t=xr()).content=t.content.replace(/,user-scalable=0$/,"")),"reveal"===this.mode&&Ie(this.panel),Be(this.panel,this.clsSidebarAnimation,this.clsMode),Be(this.$el,this.clsOverlay),Ve(this.$el,"display",""),Be(document.body,this.clsContainer,this.clsFlip),Ve(document.documentElement,"overflowY","")}},{name:"swipeLeft swipeRight",handler:function(t){this.isToggled()&&u(t.type,"Left")^this.flip&&this.hide()}}]};function xr(){return Ae('meta[name="viewport"]',document.head)||we(document.head,'<meta name="viewport">')}var yr={mixins:[fi],props:{selContainer:String,selContent:String},data:{selContainer:".uk-modal",selContent:".uk-modal-dialog"},computed:{container:function(t,e){return zt(e,t.selContainer)},content:function(t,e){return zt(e,t.selContent)}},connected:function(){Ve(this.$el,"minHeight",150)},update:{read:function(){return!!(this.content&&this.container&&$t(this.$el))&&{current:L(Ve(this.$el,"maxHeight")),max:Math.max(150,un(this.container)-(rn(this.content).height-un(this.$el)))}},write:function(t){var e=t.current,n=t.max;Ve(this.$el,"maxHeight",n),Math.round(e)!==Math.round(n)&&Qt(this.$el,"resize")},events:["resize"]}},kr={props:["width","height"],connected:function(){Ne(this.$el,"uk-responsive-width")},update:{read:function(){return!!($t(this.$el)&&this.width&&this.height)&&{width:cn(Et(this.$el)),height:this.height}},write:function(t){un(this.$el,nt.contain({height:this.height,width:this.width},t).height)},events:["resize"]}},$r={props:{offset:Number},data:{offset:0},methods:{scrollTo:function(t){var e=this;t=t&&Ae(t)||document.body,Qt(this.$el,"beforescroll",[this,t])&&jn(t,{offset:this.offset}).then(function(){return Qt(e.$el,"scrolled",[e,t])})}},events:{click:function(t){t.defaultPrevented||(t.preventDefault(),this.scrollTo("#"+Gt(decodeURIComponent((this.$el.hash||"").substr(1)))))}}},Sr="_ukScrollspy",Ir={args:"cls",props:{cls:String,target:String,hidden:Boolean,offsetTop:Number,offsetLeft:Number,repeat:Boolean,delay:Number},data:function(){return{cls:!1,target:!1,hidden:!0,offsetTop:0,offsetLeft:0,repeat:!1,delay:0,inViewClass:"uk-scrollspy-inview"}},computed:{elements:{get:function(t,e){var n=t.target;return n?Me(n,e):[e]},watch:function(t){this.hidden&&Ve(Tt(t,":not(."+this.inViewClass+")"),"visibility","hidden")},immediate:!0}},disconnected:function(){var e=this;this.elements.forEach(function(t){Be(t,e.inViewClass,t[Sr]?t[Sr].cls:""),delete t[Sr]})},update:[{read:function(t){var e=this;t.update&&this.elements.forEach(function(t){t[Sr]||(t[Sr]={cls:ut(t,"uk-scrollspy-class")||e.cls}),t[Sr].show=Hn(t,e.offsetTop,e.offsetLeft)})},write:function(i){var r=this;if(!i.update)return this.$emit(),i.update=!0;this.elements.forEach(function(e){function t(t){Ve(e,"visibility",!t&&r.hidden?"hidden":""),He(e,r.inViewClass,t),He(e,n.cls),Qt(e,t?"inview":"outview"),n.inview=t,r.$update(e)}var n=e[Sr];!n.show||n.inview||n.queued?!n.show&&n.inview&&!n.queued&&r.repeat&&t(!1):(n.queued=!0,i.promise=(i.promise||ce.resolve()).then(function(){return new ce(function(t){return setTimeout(t,r.delay)})}).then(function(){t(!0),setTimeout(function(){n.queued=!1,r.$emit()},300)}))})},events:["scroll","resize"]}]},Er={props:{cls:String,closest:String,scroll:Boolean,overflow:Boolean,offset:Number},data:{cls:"uk-active",closest:!1,scroll:!1,overflow:!0,offset:0},computed:{links:{get:function(t,e){return Me('a[href^="#"]',e).filter(function(t){return t.hash})},watch:function(t){this.scroll&&this.$create("scroll",t,{offset:this.offset||0})},immediate:!0},targets:function(){return Me(this.links.map(function(t){return Gt(t.hash).substr(1)}).join(","))},elements:function(t){var e=t.closest;return zt(this.links,e||"*")}},update:[{read:function(){var n=this,t=this.targets.length;if(!t||!$t(this.$el))return!1;var i=Wn(this.targets,/auto|scroll/,!0)[0],e=i.scrollTop,r=i.scrollHeight-Rn(i),o=!1;return e===r?o=t-1:(this.targets.every(function(t,e){if(on(t).top-on(Vn(i)).top-n.offset<=0)return o=e,!0}),!1===o&&this.overflow&&(o=0)),{active:o}},write:function(t){var e=t.active;this.links.forEach(function(t){return t.blur()}),Be(this.elements,this.cls),!1!==e&&Qt(this.$el,"active",[e,Ne(this.elements[e],this.cls)])},events:["scroll","resize"]}]},Tr={mixins:[fi,hr],props:{top:null,bottom:Boolean,offset:String,animation:String,clsActive:String,clsInactive:String,clsFixed:String,clsBelow:String,selTarget:String,widthElement:Boolean,showOnUp:Boolean,targetOffset:Number},data:{top:0,bottom:!1,offset:0,animation:"",clsActive:"uk-active",clsInactive:"",clsFixed:"uk-sticky-fixed",clsBelow:"uk-sticky-below",selTarget:"",widthElement:!1,showOnUp:!1,targetOffset:!1},computed:{offset:function(t){return fn(t.offset)},selTarget:function(t,e){var n=t.selTarget;return n&&Ae(n,e)||e},widthElement:function(t,e){return Pt(t.widthElement,e)||this.placeholder},isActive:{get:function(){return Pe(this.selTarget,this.clsActive)},set:function(t){t&&!this.isActive?(Oe(this.selTarget,this.clsInactive,this.clsActive),Qt(this.$el,"active")):t||Pe(this.selTarget,this.clsInactive)||(Oe(this.selTarget,this.clsActive,this.clsInactive),Qt(this.$el,"inactive"))}}},connected:function(){this.placeholder=Ae("+ .uk-sticky-placeholder",this.$el)||Ae('<div class="uk-sticky-placeholder"></div>'),this.isFixed=!1,this.isActive=!1},disconnected:function(){this.isFixed&&(this.hide(),Be(this.selTarget,this.clsInactive)),ke(this.placeholder),this.placeholder=null,this.widthElement=null},events:[{name:"load hashchange popstate",el:function(){return window},handler:function(){var i,r=this;!1!==this.targetOffset&&location.hash&&0<window.pageYOffset&&((i=Ae(location.hash))&&mn.read(function(){var t=on(i).top,e=on(r.$el).top,n=r.$el.offsetHeight;r.isFixed&&t<=e+n&&e<=t+i.offsetHeight&&Ln(window,t-n-(B(r.targetOffset)?r.targetOffset:0)-r.offset)}))}}],update:[{read:function(t,e){var n=t.height;if(this.inactive=!this.matchMedia||!$t(this.$el),this.inactive)return!1;this.isActive&&e.has("resize")&&(this.hide(),n=this.$el.offsetHeight,this.show()),n=this.isActive?n:this.$el.offsetHeight,this.topOffset=on(this.isFixed?this.placeholder:this.$el).top,this.bottomOffset=this.topOffset+n;var i=Cr("bottom",this);return this.top=Math.max(L(Cr("top",this)),this.topOffset)-this.offset,this.bottom=i&&i-this.$el.offsetHeight,this.width=rn($t(this.widthElement)?this.widthElement:this.$el).width,{height:n,top:an(this.placeholder)[0],margins:Ve(this.$el,["marginTop","marginBottom","marginLeft","marginRight"])}},write:function(t){var e=t.height,n=t.margins,i=this.placeholder;Ve(i,Y({height:e},n)),Nt(i,document)||(xe(this.$el,i),i.hidden=!0),this.isActive=!!this.isActive},events:["resize"]},{read:function(t){var e=t.scroll;return void 0===e&&(e=0),this.scroll=window.pageYOffset,{dir:e<=this.scroll?"down":"up",scroll:this.scroll}},write:function(t,e){var n=this,i=Date.now(),r=e.has("scroll"),o=t.initTimestamp;void 0===o&&(o=0);var s=t.dir,a=t.lastDir,u=t.lastScroll,c=t.scroll,h=t.top;if(!((t.lastScroll=c)<0||c===u&&r||this.showOnUp&&!r&&!this.isFixed||((300<i-o||s!==a)&&(t.initScroll=c,t.initTimestamp=i),t.lastDir=s,this.showOnUp&&!this.isFixed&&Math.abs(t.initScroll-c)<=30&&Math.abs(u-c)<=10)))if(this.inactive||c<this.top||this.showOnUp&&(c<=this.top||"down"===s&&r||"up"===s&&!this.isFixed&&c<=this.bottomOffset)){if(!this.isFixed)return void(en.inProgress(this.$el)&&c<h&&(en.cancel(this.$el),this.hide()));this.isFixed=!1,this.animation&&c>this.topOffset?(en.cancel(this.$el),en.out(this.$el,this.animation).then(function(){return n.hide()},Q)):this.hide()}else this.isFixed?this.update():this.animation?(en.cancel(this.$el),this.show(),en.in(this.$el,this.animation).catch(Q)):this.show()},events:["resize","scroll"]}],methods:{show:function(){this.isFixed=!0,this.update(),this.placeholder.hidden=!1},hide:function(){this.isActive=!1,Be(this.$el,this.clsFixed,this.clsBelow),Ve(this.$el,{position:"",top:"",width:""}),this.placeholder.hidden=!0},update:function(){var t=0!==this.top||this.scroll>this.top,e=Math.max(0,this.offset);B(this.bottom)&&this.scroll>this.bottom-this.offset&&(e=this.bottom-this.scroll),Ve(this.$el,{position:"fixed",top:e+"px",width:this.width}),this.isActive=t,He(this.$el,this.clsBelow,this.scroll>this.bottomOffset),Ne(this.$el,this.clsFixed)}}};function Cr(t,e){var n=e.$props,i=e.$el,r=e[t+"Offset"],o=n[t];if(o)return z(o)&&o.match(/^-?\d/)?r+fn(o):on(!0===o?Et(i):Pt(o,i)).bottom}var _r,Ar,Mr,zr={mixins:[pi],args:"connect",props:{connect:String,toggle:String,active:Number,swiping:Boolean},data:{connect:"~.uk-switcher",toggle:"> * > :first-child",active:0,swiping:!0,cls:"uk-active",attrItem:"uk-switcher-item"},computed:{connects:{get:function(t,e){return Ht(t.connect,e)},watch:function(t){var n=this;this.swiping&&Ve(t,"touch-action","pan-y pinch-zoom");var i=this.index();this.connects.forEach(function(t){return Dt(t).forEach(function(t,e){return He(t,n.cls,e===i)})})},immediate:!0},toggles:{get:function(t,e){return Me(t.toggle,e).filter(function(t){return!At(t,".uk-disabled *, .uk-disabled, [disabled]")})},watch:function(t){var e=this.index();this.show(~e?e:t[this.active]||t[0])},immediate:!0},children:function(){var t=this;return Dt(this.$el).filter(function(e){return t.toggles.some(function(t){return Nt(t,e)})})}},events:[{name:"click",delegate:function(){return this.toggle},handler:function(t){t.preventDefault(),this.show(t.current)}},{name:"click",el:function(){return this.connects},delegate:function(){return"["+this.attrItem+"],[data-"+this.attrItem+"]"},handler:function(t){t.preventDefault(),this.show(ut(t.current,this.attrItem))}},{name:"swipeRight swipeLeft",filter:function(){return this.swiping},el:function(){return this.connects},handler:function(t){var e=t.type;this.show(u(e,"Left")?"next":"previous")}}],methods:{index:function(){var e=this;return x(this.children,function(t){return Pe(t,e.cls)})},show:function(t){var n=this,i=this.index(),r=it(this.children[it(t,this.toggles,i)],Dt(this.$el));i!==r&&(this.children.forEach(function(t,e){He(t,n.cls,r===e),ot(n.toggles[e],"aria-expanded",r===e)}),this.connects.forEach(function(t){var e=t.children;return n.toggleElement(W(e).filter(function(t){return Pe(t,n.cls)}),!1,0<=i).then(function(){return n.toggleElement(e[r],!0,0<=i)})}))}}},Nr={mixins:[fi],extends:zr,props:{media:Boolean},data:{media:960,attrItem:"uk-tab-item"},connected:function(){var t=Pe(this.$el,"uk-tab-left")?"uk-tab-left":!!Pe(this.$el,"uk-tab-right")&&"uk-tab-right";t&&this.$create("toggle",this.$el,{cls:t,mode:"media",media:this.media})}},Br={mixins:[hr,pi],args:"target",props:{href:String,target:null,mode:"list",queued:Boolean},data:{href:!1,target:!1,mode:"click",queued:!0},computed:{target:{get:function(t,e){var n=t.href,i=t.target;return(i=Ht(i||n,e)).length&&i||[e]},watch:function(){this.updateAria()},immediate:!0}},events:[{name:wt+" "+bt,filter:function(){return v(this.mode,"hover")},handler:function(t){se(t)||this.toggle("toggle"+(t.type===wt?"show":"hide"))}},{name:"click",filter:function(){return v(this.mode,"click")||pt&&v(this.mode,"hover")},handler:function(t){var e;(zt(t.target,'a[href="#"], a[href=""]')||(e=zt(t.target,"a[href]"))&&(!Dr(this.target,this.cls)||e.hash&&At(this.target,e.hash)))&&t.preventDefault(),this.toggle()}},{name:"toggled",self:!0,el:function(){return this.target},handler:function(t,e){this.updateAria(e)}}],update:{read:function(){return!(!v(this.mode,"media")||!this.media)&&{match:this.matchMedia}},write:function(t){var e=t.match,n=this.isToggled(this.target);(e?!n:n)&&this.toggle()},events:["resize"]},methods:{toggle:function(t){var n=this;if(Qt(this.target,t||"toggle",[this])){if(!this.queued)return this.toggleElement(this.target);var e,i=this.target.filter(function(t){return Pe(t,n.clsLeave)});i.length?this.target.forEach(function(t){var e=v(i,t);n.toggleElement(t,e,e)}):(e=this.target.filter(this.isToggled),this.toggleElement(e,!1).then(function(){return n.toggleElement(n.target.filter(function(t){return!v(e,t)}),!0)}))}},updateAria:function(t){ot(this.$el,"aria-expanded",M(t)?t:Dr(this.target,this.cls))}}};function Dr(t,e){return e?Pe(t,e.split(" ")[0]):$t(t)}function Or(t){for(var e=t.addedNodes,n=t.removedNodes,i=0;i<e.length;i++)_e(e[i],Ar);for(var r=0;r<n.length;r++)_e(n[r],Mr)}function Pr(t){var e,n=t.target,i=t.attributeName,r=ui(i);r&&r in _r&&(st(n,i)?_r[r](n):(e=_r.getComponent(n,r))&&e.$destroy())}G(Object.freeze({__proto__:null,Accordion:gi,Alert:wi,Cover:xi,Drop:$i,Dropdown:$i,FormCustom:Si,Gif:Ii,Grid:Ai,HeightMatch:Ni,HeightViewport:Oi,Icon:Ui,Img:Qi,Leader:lr,Margin:Ei,Modal:gr,Nav:vr,Navbar:wr,Offcanvas:br,OverflowAuto:yr,Responsive:kr,Scroll:$r,Scrollspy:Ir,ScrollspyNav:Er,Sticky:Tr,Svg:Pi,Switcher:zr,Tab:Nr,Toggle:Br,Video:bi,Close:Ki,Spinner:Ji,SlidenavNext:Xi,SlidenavPrevious:Xi,SearchIcon:Gi,Marker:Yi,NavbarToggleIcon:Yi,OverlayIcon:Yi,PaginationNext:Yi,PaginationPrevious:Yi,Totop:Yi}),function(t,e){return Zn.component(e,t)}),Zn.use(function(e){var t,n,i,r;ct&&(n=function(){t||(t=!0,mn.write(function(){return t=!1}),e.update(null,"resize"))},Kt(window,"load resize",n),Kt(document,"loadedmetadata load",n,!0),"ResizeObserver"in window&&new ResizeObserver(n).observe(document.documentElement),Kt(window,"scroll",function(t){i||(i=!0,mn.write(function(){return i=!1}),e.update(null,t.type))},{passive:!0,capture:!0}),r=0,Kt(document,"animationstart",function(t){var e=t.target;(Ve(e,"animationName")||"").match(/^uk-.*(left|right)/)&&(r++,Ve(document.documentElement,"overflowX","hidden"),setTimeout(function(){--r||Ve(document.documentElement,"overflowX","")},R(Ve(e,"animationDuration"))+100))},!0),Kt(document,mt,function(t){var s,a;se(t)&&(s=ae(t),a="tagName"in t.target?t.target:Et(t.target),Zt(document,vt+" "+xt+" scroll",function(t){var e=ae(t),r=e.x,o=e.y;("scroll"!==t.type&&a&&r&&100<Math.abs(s.x-r)||o&&100<Math.abs(s.y-o))&&setTimeout(function(){var t,e,n,i;Qt(a,"swipe"),Qt(a,"swipe"+(t=s.x,e=s.y,n=r,i=o,Math.abs(t-n)>=Math.abs(e-i)?0<t-n?"Left":"Right":0<e-i?"Up":"Down"))})}))},{passive:!0}))}),Ar=(_r=Zn).connect,Mr=_r.disconnect,ct&&window.MutationObserver&&mn.read(function(){document.body&&_e(document.body,Ar),new MutationObserver(function(t){return t.forEach(Or)}).observe(document,{childList:!0,subtree:!0}),new MutationObserver(function(t){return t.forEach(Pr)}).observe(document,{attributes:!0,subtree:!0}),_r._initialized=!0});var Hr={mixins:[fi],props:{date:String,clsWrapper:String},data:{date:"",clsWrapper:".uk-countdown-%unit%"},computed:{date:function(t){var e=t.date;return Date.parse(e)},days:function(t,e){return Ae(t.clsWrapper.replace("%unit%","days"),e)},hours:function(t,e){return Ae(t.clsWrapper.replace("%unit%","hours"),e)},minutes:function(t,e){return Ae(t.clsWrapper.replace("%unit%","minutes"),e)},seconds:function(t,e){return Ae(t.clsWrapper.replace("%unit%","seconds"),e)},units:function(){var e=this;return["days","hours","minutes","seconds"].filter(function(t){return e[t]})}},connected:function(){this.start()},disconnected:function(){var e=this;this.stop(),this.units.forEach(function(t){return ge(e[t])})},events:[{name:"visibilitychange",el:function(){return document},handler:function(){document.hidden?this.stop():this.start()}}],update:{write:function(){var t,e,i=this,r=(t=this.date,{total:e=t-Date.now(),seconds:e/1e3%60,minutes:e/1e3/60%60,hours:e/1e3/60/60%24,days:e/1e3/60/60/24});r.total<=0&&(this.stop(),r.days=r.hours=r.minutes=r.seconds=0),this.units.forEach(function(t){var e=(e=String(Math.floor(r[t]))).length<2?"0"+e:e,n=i[t];n.textContent!==e&&((e=e.split("")).length!==n.children.length&&ve(n,e.map(function(){return"<span></span>"}).join("")),e.forEach(function(t,e){return n.children[e].textContent=t}))})}},methods:{start:function(){this.stop(),this.date&&this.units.length&&(this.$update(),this.timer=setInterval(this.$update,1e3))},stop:function(){this.timer&&(clearInterval(this.timer),this.timer=null)}}};var Lr="uk-transition-leave",jr="uk-transition-enter";function Fr(t,s,a,u){void 0===u&&(u=0);function e(t){return function(){return c===Wr(s)?t():ce.reject()}}var c=Wr(s,!0),h={opacity:1},l={opacity:0},n=e(function(){return Ne(s,Lr),ce.all(Rr(s).map(function(e,n){return new ce(function(t){return setTimeout(function(){return Je.start(e,l,a/2,"ease").then(t)},n*u)})})).then(function(){return Be(s,Lr)})}),i=e(function(){var o=un(s);return Ne(s,jr),t(),Ve(Dt(s),{opacity:0}),new ce(function(r){return requestAnimationFrame(function(){var t=Dt(s),e=un(s);Ve(s,"alignContent","flex-start"),un(s,o);var n=Rr(s);Ve(t,l);var i=n.map(function(e,n){return new ce(function(t){return setTimeout(function(){return Je.start(e,h,a/2,"ease").then(t)},n*u)})});o!==e&&i.push(Je.start(s,{height:e},a/2+n.length*u,"ease")),ce.all(i).then(function(){Be(s,jr),c===Wr(s)&&(Ve(s,{height:"",alignContent:""}),Ve(t,{opacity:""}),delete s.dataset.transition),r()})})})});return Pe(s,Lr)?Vr(s).then(i):Pe(s,jr)?Vr(s).then(n).then(i):n().then(i)}function Wr(t,e){return e&&(t.dataset.transition=1+Wr(t)),H(t.dataset.transition)||0}function Vr(t){return ce.all(Dt(t).filter(Je.inProgress).map(function(e){return new ce(function(t){return Zt(e,"transitionend transitioncanceled",t)})}))}function Rr(t){return Ti(Dt(t)).reduce(function(t,e){return t.concat(K(e.filter(function(t){return Hn(t)}),"offsetLeft"))},[])}function qr(t,f,p){return new ce(function(d){return requestAnimationFrame(function(){var c=Dt(f),h=c.map(function(t){return Ur(t,!0)}),l=Ve(f,["height","padding"]);Je.cancel(f),c.forEach(Je.cancel),Yr(f),t(),c=c.concat(Dt(f).filter(function(t){return!v(c,t)})),ce.resolve().then(function(){mn.flush();var i,r,o,t,e,n=Ve(f,["height","padding"]),s=(i=f,o=h,t=(r=c).map(function(t,e){return!!(Et(t)&&e in o)&&(o[e]?$t(t)?Xr(t):{opacity:0}:{opacity:$t(t)?1:0})}),e=t.map(function(t,e){var n=Et(r[e])===i&&(o[e]||Ur(r[e]));return!!n&&(t?"opacity"in t||(n.opacity%1?t.opacity=1:delete n.opacity):delete n.opacity,n)}),[t,e]),a=s[0],u=s[1];c.forEach(function(t,e){return u[e]&&Ve(t,u[e])}),Ve(f,Y({display:"block"},l)),requestAnimationFrame(function(){var t=c.map(function(t,e){return Et(t)===f&&Je.start(t,a[e],p,"ease")}).concat(Je.start(f,n,p,"ease"));ce.all(t).then(function(){c.forEach(function(t,e){return Et(t)===f&&Ve(t,"display",0===a[e].opacity?"none":"")}),Yr(f)},Q).then(d)})})})})}function Ur(t,e){var n=Ve(t,"zIndex");return!!$t(t)&&Y({display:"",opacity:e?Ve(t,"opacity"):"0",pointerEvents:"none",position:"absolute",zIndex:"auto"===n?Ot(t):n},Xr(t))}function Yr(t){Ve(t.children,{height:"",left:"",opacity:"",pointerEvents:"",position:"",top:"",marginTop:"",marginLeft:"",transform:"",width:"",zIndex:""}),Ve(t,{height:"",display:"",padding:""})}function Xr(t){var e=on(t),n=e.height,i=e.width,r=sn(t),o=r.top,s=r.left,a=Ve(t,["marginTop","marginLeft"]);return{top:o,left:s,height:n,width:i,marginLeft:a.marginLeft,marginTop:a.marginTop,transform:""}}var Gr={props:{duration:Number,animation:String},data:{duration:150,animation:"slide"},methods:{animate:function(t,e){var n=this;void 0===e&&(e=this.$el);var i=this.animation;return("fade"===i?Fr:"delayed-fade"===i?function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return Fr.apply(void 0,t.concat([40]))}:qr)(t,e,this.duration).then(function(){return n.$update(e,"resize")},Q)}}},Kr={mixins:[Gr],args:"target",props:{target:Boolean,selActive:Boolean},data:{target:null,selActive:!1,attrItem:"uk-filter-control",cls:"uk-active",duration:250},computed:{toggles:{get:function(t,e){var n=t.attrItem;return Me("["+n+"],[data-"+n+"]",e)},watch:function(){var e,n=this;this.updateState(),!1!==this.selActive&&(e=Me(this.selActive,this.$el),this.toggles.forEach(function(t){return He(t,n.cls,v(e,t))}))},immediate:!0},children:{get:function(t,e){return Me(t.target+" > *",e)},watch:function(t,e){var n,i;i=e,(n=t).length===i.length&&n.every(function(t){return~i.indexOf(t)})||this.updateState()}}},events:[{name:"click",delegate:function(){return"["+this.attrItem+"],[data-"+this.attrItem+"]"},handler:function(t){t.preventDefault(),this.apply(t.current)}}],methods:{apply:function(t){var e,n,i=this.getState(),r=Zr(t,this.attrItem,this.getState());e=i,n=r,["filter","sort"].every(function(t){return q(e[t],n[t])})||this.setState(r)},getState:function(){var n=this;return this.toggles.filter(function(t){return Pe(t,n.cls)}).reduce(function(t,e){return Zr(e,n.attrItem,t)},{filter:{"":""},sort:[]})},setState:function(n,i){var r=this;void 0===i&&(i=!0),n=Y({filter:{"":""},sort:[]},n),Qt(this.$el,"beforeFilter",[this,n]),this.toggles.forEach(function(t){return He(t,r.cls,!!function(t,e,n){var i=n.filter;void 0===i&&(i={"":""});var r=n.sort,o=r[0],s=r[1],a=Jr(t,e),u=a.filter;void 0===u&&(u="");var c=a.group;void 0===c&&(c="");var h=a.sort,l=a.order;void 0===l&&(l="asc");return O(h)?c in i&&u===i[c]||!u&&c&&!(c in i)&&!i[""]:o===h&&s===l}(t,r.attrItem,n))}),ce.all(Me(this.target,this.$el).map(function(t){function e(){!function(t,e,n){var i=function(t){var e=t.filter,n="";return G(e,function(t){return n+=t||""}),n}(t);n.forEach(function(t){return Ve(t,"display",i&&!At(t,i)?"none":"")});var r=t.sort,o=r[0],s=r[1];{var a;o&&(q(a=function(t,n,i){return Y([],t).sort(function(t,e){return ut(t,n).localeCompare(ut(e,n),void 0,{numeric:!0})*("asc"===i||-1)})}(n,o,s),n)||we(e,a))}}(n,t,Dt(t)),r.$update(r.$el)}return i?r.animate(e,t):e()})).then(function(){return Qt(r.$el,"afterFilter",[r])})},updateState:function(){var t=this;mn.write(function(){return t.setState(t.getState(),!1)})}}};function Jr(t,e){return En(ut(t,e),["filter"])}function Zr(t,e,n){var i=Jr(t,e),r=i.filter,o=i.group,s=i.sort,a=i.order;return void 0===a&&(a="asc"),(r||O(s))&&(o?r?(delete n.filter[""],n.filter[o]=r):(delete n.filter[o],(D(n.filter)||""in n.filter)&&(n.filter={"":r||""})):n.filter={"":r||""}),O(s)||(n.sort=[s,a]),n}var Qr={slide:{show:function(t){return[{transform:eo(-100*t)},{transform:eo()}]},percent:to,translate:function(t,e){return[{transform:eo(-100*e*t)},{transform:eo(100*e*(1-t))}]}}};function to(t){return Math.abs(Ve(t,"transform").split(",")[4]/t.offsetWidth)||0}function eo(t,e){return void 0===t&&(t=0),void 0===e&&(e="%"),t+=t?e:"",ht?"translateX("+t+")":"translate3d("+t+", 0, 0)"}function no(t){return"scale3d("+t+", "+t+", 1)"}var io=Y({},Qr,{fade:{show:function(){return[{opacity:0},{opacity:1}]},percent:function(t){return 1-Ve(t,"opacity")},translate:function(t){return[{opacity:1-t},{opacity:t}]}},scale:{show:function(){return[{opacity:0,transform:no(.8)},{opacity:1,transform:no(1)}]},percent:function(t){return 1-Ve(t,"opacity")},translate:function(t){return[{opacity:1-t,transform:no(1-.2*t)},{opacity:t,transform:no(.8+.2*t)}]}}});function ro(t,e,n){Qt(t,te(e,!1,!1,n))}var oo={mixins:[{props:{autoplay:Boolean,autoplayInterval:Number,pauseOnHover:Boolean},data:{autoplay:!1,autoplayInterval:7e3,pauseOnHover:!0},connected:function(){this.autoplay&&this.startAutoplay()},disconnected:function(){this.stopAutoplay()},update:function(){ot(this.slides,"tabindex","-1")},events:[{name:"visibilitychange",el:function(){return document},filter:function(){return this.autoplay},handler:function(){document.hidden?this.stopAutoplay():this.startAutoplay()}}],methods:{startAutoplay:function(){var t=this;this.stopAutoplay(),this.interval=setInterval(function(){return(!t.draggable||!Ae(":focus",t.$el))&&(!t.pauseOnHover||!At(t.$el,":hover"))&&!t.stack.length&&t.show("next")},this.autoplayInterval)},stopAutoplay:function(){this.interval&&clearInterval(this.interval)}}},{props:{draggable:Boolean},data:{draggable:!0,threshold:10},created:function(){var i=this;["start","move","end"].forEach(function(t){var n=i[t];i[t]=function(t){var e=ae(t).x*(lt?-1:1);i.prevPos=e!==i.pos?i.pos:i.prevPos,i.pos=e,n(t)}})},events:[{name:mt,delegate:function(){return this.selSlides},handler:function(t){var e;!this.draggable||!se(t)&&(!(e=t.target).children.length&&e.childNodes.length)||zt(t.target,St)||0<t.button||this.length<2||this.start(t)}},{name:"dragstart",handler:function(t){t.preventDefault()}}],methods:{start:function(){this.drag=this.pos,this._transitioner?(this.percent=this._transitioner.percent(),this.drag+=this._transitioner.getDistance()*this.percent*this.dir,this._transitioner.cancel(),this._transitioner.translate(this.percent),this.dragging=!0,this.stack=[]):this.prevIndex=this.index,Kt(document,gt,this.move,{passive:!1}),Kt(document,vt+" "+xt+" input",this.end,!0),Ve(this.list,"userSelect","none")},move:function(t){var e=this,n=this.pos-this.drag;if(!(0==n||this.prevPos===this.pos||!this.dragging&&Math.abs(n)<this.threshold)){Ve(this.list,"pointerEvents","none"),t.cancelable&&t.preventDefault(),this.dragging=!0,this.dir=n<0?1:-1;for(var i=this.slides,r=this.prevIndex,o=Math.abs(n),s=this.getIndex(r+this.dir,r),a=this._getDistance(r,s)||i[r].offsetWidth;s!==r&&a<o;)this.drag-=a*this.dir,r=s,o-=a,s=this.getIndex(r+this.dir,r),a=this._getDistance(r,s)||i[r].offsetWidth;this.percent=o/a;var u,c=i[r],h=i[s],l=this.index!==s,d=r===s;[this.index,this.prevIndex].filter(function(t){return!v([s,r],t)}).forEach(function(t){Qt(i[t],"itemhidden",[e]),d&&(u=!0,e.prevIndex=r)}),(this.index===r&&this.prevIndex!==r||u)&&Qt(i[this.index],"itemshown",[this]),l&&(this.prevIndex=r,this.index=s,d||Qt(c,"beforeitemhide",[this]),Qt(h,"beforeitemshow",[this])),this._transitioner=this._translate(Math.abs(this.percent),c,!d&&h),l&&(d||Qt(c,"itemhide",[this]),Qt(h,"itemshow",[this]))}},end:function(){var t;Jt(document,gt,this.move,{passive:!1}),Jt(document,vt+" "+xt+" input",this.end,!0),this.dragging&&(this.dragging=null,this.index===this.prevIndex?(this.percent=1-this.percent,this.dir*=-1,this._show(!1,this.index,!0),this._transitioner=null):(t=(lt?this.dir*(lt?1:-1):this.dir)<0==this.prevPos>this.pos,this.index=t?this.index:this.prevIndex,t&&(this.percent=1-this.percent),this.show(0<this.dir&&!t||this.dir<0&&t?"next":"previous",!0))),Ve(this.list,{userSelect:"",pointerEvents:""}),this.drag=this.percent=null}}},{data:{selNav:!1},computed:{nav:function(t,e){return Ae(t.selNav,e)},selNavItem:function(t){var e=t.attrItem;return"["+e+"],[data-"+e+"]"},navItems:function(t,e){return Me(this.selNavItem,e)}},update:{write:function(){var n=this;this.nav&&this.length!==this.nav.children.length&&ve(this.nav,this.slides.map(function(t,e){return"<li "+n.attrItem+'="'+e+'"><a href></a></li>'}).join("")),this.navItems.concat(this.nav).forEach(function(t){return t&&(t.hidden=!n.maxIndex)}),this.updateNav()},events:["resize"]},events:[{name:"click",delegate:function(){return this.selNavItem},handler:function(t){t.preventDefault(),this.show(ut(t.current,this.attrItem))}},{name:"itemshow",handler:"updateNav"}],methods:{updateNav:function(){var n=this,i=this.getValidIndex();this.navItems.forEach(function(t){var e=ut(t,n.attrItem);He(t,n.clsActive,H(e)===i),He(t,"uk-invisible",n.finite&&("previous"===e&&0===i||"next"===e&&i>=n.maxIndex))})}}}],props:{clsActivated:Boolean,easing:String,index:Number,finite:Boolean,velocity:Number,selSlides:String},data:function(){return{easing:"ease",finite:!1,velocity:1,index:0,prevIndex:-1,stack:[],percent:0,clsActive:"uk-active",clsActivated:!1,Transitioner:!1,transitionOptions:{}}},connected:function(){this.prevIndex=-1,this.index=this.getValidIndex(this.$props.index),this.stack=[]},disconnected:function(){Be(this.slides,this.clsActive)},computed:{duration:function(t,e){var n=t.velocity;return so(e.offsetWidth/n)},list:function(t,e){return Ae(t.selList,e)},maxIndex:function(){return this.length-1},selSlides:function(t){return t.selList+" "+(t.selSlides||"> *")},slides:{get:function(){return Me(this.selSlides,this.$el)},watch:function(){this.$reset()}},length:function(){return this.slides.length}},events:{itemshown:function(){this.$update(this.list)}},methods:{show:function(t,e){var n=this;if(void 0===e&&(e=!1),!this.dragging&&this.length){var i=this.stack,r=e?0:i.length,o=function(){i.splice(r,1),i.length&&n.show(i.shift(),!0)};if(i[e?"unshift":"push"](t),!e&&1<i.length)2===i.length&&this._transitioner.forward(Math.min(this.duration,200));else{var s,a,u=this.getIndex(this.index),c=Pe(this.slides,this.clsActive)&&this.slides[u],h=this.getIndex(t,this.index),l=this.slides[h];if(c!==l){if(this.dir=(a=u,"next"!==(s=t)&&("previous"===s||s<a)?-1:1),this.prevIndex=u,this.index=h,c&&!Qt(c,"beforeitemhide",[this])||!Qt(l,"beforeitemshow",[this,c]))return this.index=this.prevIndex,void o();var d=this._show(c,l,e).then(function(){return c&&Qt(c,"itemhidden",[n]),Qt(l,"itemshown",[n]),new ce(function(t){mn.write(function(){i.shift(),i.length?n.show(i.shift(),!0):n._transitioner=null,t()})})});return c&&Qt(c,"itemhide",[this]),Qt(l,"itemshow",[this]),d}o()}}},getIndex:function(t,e){return void 0===t&&(t=this.index),void 0===e&&(e=this.index),Z(it(t,this.slides,e,this.finite),0,this.maxIndex)},getValidIndex:function(t,e){return void 0===t&&(t=this.index),void 0===e&&(e=this.prevIndex),this.getIndex(t,e)},_show:function(t,e,n){if(this._transitioner=this._getTransitioner(t,e,this.dir,Y({easing:n?e.offsetWidth<600?"cubic-bezier(0.25, 0.46, 0.45, 0.94)":"cubic-bezier(0.165, 0.84, 0.44, 1)":this.easing},this.transitionOptions)),!n&&!t)return this._translate(1),ce.resolve();var i=this.stack.length;return this._transitioner[1<i?"forward":"show"](1<i?Math.min(this.duration,75+75/(i-1)):this.duration,this.percent)},_getDistance:function(t,e){return this._getTransitioner(t,t!==e&&e).getDistance()},_translate:function(t,e,n){void 0===e&&(e=this.prevIndex),void 0===n&&(n=this.index);var i=this._getTransitioner(e!==n&&e,n);return i.translate(t),i},_getTransitioner:function(t,e,n,i){return void 0===t&&(t=this.prevIndex),void 0===e&&(e=this.index),void 0===n&&(n=this.dir||1),void 0===i&&(i=this.transitionOptions),new this.Transitioner(N(t)?this.slides[t]:t,N(e)?this.slides[e]:e,n*(lt?-1:1),i)}}};function so(t){return.5*t+300}var ao={mixins:[oo],props:{animation:String},data:{animation:"slide",clsActivated:"uk-transition-active",Animations:Qr,Transitioner:function(o,s,a,t){var e=t.animation,u=t.easing,n=e.percent,i=e.translate,r=e.show;void 0===r&&(r=Q);var c=r(a),h=new ue;return{dir:a,show:function(t,e,n){var i=this;void 0===e&&(e=0);var r=n?"linear":u;return t-=Math.round(t*Z(e,-1,1)),this.translate(e),ro(s,"itemin",{percent:e,duration:t,timing:r,dir:a}),ro(o,"itemout",{percent:1-e,duration:t,timing:r,dir:a}),ce.all([Je.start(s,c[1],t,r),Je.start(o,c[0],t,r)]).then(function(){i.reset(),h.resolve()},Q),h.promise},cancel:function(){Je.cancel([s,o])},reset:function(){for(var t in c[0])Ve([s,o],t,"")},forward:function(t,e){return void 0===e&&(e=this.percent()),Je.cancel([s,o]),this.show(t,e,!0)},translate:function(t){this.reset();var e=i(t,a);Ve(s,e[1]),Ve(o,e[0]),ro(s,"itemtranslatein",{percent:t,dir:a}),ro(o,"itemtranslateout",{percent:1-t,dir:a})},percent:function(){return n(o||s,s,a)},getDistance:function(){return o&&o.offsetWidth}}}},computed:{animation:function(t){var e=t.animation,n=t.Animations;return Y(n[e]||n.slide,{name:e})},transitionOptions:function(){return{animation:this.animation}}},events:{"itemshow itemhide itemshown itemhidden":function(t){var e=t.target;this.$update(e)},beforeitemshow:function(t){Ne(t.target,this.clsActive)},itemshown:function(t){Ne(t.target,this.clsActivated)},itemhidden:function(t){Be(t.target,this.clsActive,this.clsActivated)}}},uo={mixins:[dr,pr,pi,ao],functional:!0,props:{delayControls:Number,preload:Number,videoAutoplay:Boolean,template:String},data:function(){return{preload:1,videoAutoplay:!1,delayControls:3e3,items:[],cls:"uk-open",clsPage:"uk-lightbox-page",selList:".uk-lightbox-items",attrItem:"uk-lightbox-item",selClose:".uk-close-large",selCaption:".uk-lightbox-caption",pauseOnHover:!1,velocity:2,Animations:io,template:'<div class="uk-lightbox uk-overflow-hidden"> <ul class="uk-lightbox-items"></ul> <div class="uk-lightbox-toolbar uk-position-top uk-text-right uk-transition-slide-top uk-transition-opaque"> <button class="uk-lightbox-toolbar-icon uk-close-large" type="button" uk-close></button> </div> <a class="uk-lightbox-button uk-position-center-left uk-position-medium uk-transition-fade" href uk-slidenav-previous uk-lightbox-item="previous"></a> <a class="uk-lightbox-button uk-position-center-right uk-position-medium uk-transition-fade" href uk-slidenav-next uk-lightbox-item="next"></a> <div class="uk-lightbox-toolbar uk-lightbox-caption uk-position-bottom uk-text-center uk-transition-slide-bottom uk-transition-opaque"></div> </div>'}},created:function(){var t=Ae(this.template),e=Ae(this.selList,t);this.items.forEach(function(){return we(e,"<li>")}),this.$mount(we(this.container,t))},computed:{caption:function(t,e){return Ae(t.selCaption,e)}},events:[{name:gt+" "+mt+" keydown",handler:"showControls"},{name:"click",self:!0,delegate:function(){return this.selSlides},handler:function(t){t.defaultPrevented||this.hide()}},{name:"shown",self:!0,handler:function(){this.showControls()}},{name:"hide",self:!0,handler:function(){this.hideControls(),Be(this.slides,this.clsActive),Je.stop(this.slides)}},{name:"hidden",self:!0,handler:function(){this.$destroy(!0)}},{name:"keyup",el:function(){return document},handler:function(t){if(this.isToggled(this.$el)&&this.draggable)switch(t.keyCode){case 37:this.show("previous");break;case 39:this.show("next")}}},{name:"beforeitemshow",handler:function(t){this.isToggled()||(this.draggable=!1,t.preventDefault(),this.toggleElement(this.$el,!0,!1),this.animation=io.scale,Be(t.target,this.clsActive),this.stack.splice(1,0,this.index))}},{name:"itemshow",handler:function(){ve(this.caption,this.getItem().caption||"");for(var t=-this.preload;t<=this.preload;t++)this.loadItem(this.index+t)}},{name:"itemshown",handler:function(){this.draggable=this.$props.draggable}},{name:"itemload",handler:function(t,r){var o=this,i=r.source,e=r.type,s=r.alt;void 0===s&&(s="");var a,u,n,c=r.poster,h=r.attrs;void 0===h&&(h={}),this.setItem(r,"<span uk-spinner></span>"),i&&(u={frameborder:"0",allow:"autoplay",allowfullscreen:"",style:"max-width: 100%; box-sizing: border-box;","uk-responsive":"","uk-video":""+this.videoAutoplay},"image"===e||i.match(/\.(avif|jpe?g|a?png|gif|svg|webp)($|\?)/i)?me(i,h.srcset,h.size).then(function(t){var e=t.width,n=t.height;return o.setItem(r,co("img",Y({src:i,width:e,height:n,alt:s},h)))},function(){return o.setError(r)}):"video"===e||i.match(/\.(mp4|webm|ogv)($|\?)/i)?(Kt(n=co("video",Y({src:i,poster:c,controls:"",playsinline:"","uk-video":""+this.videoAutoplay},h)),"loadedmetadata",function(){ot(n,{width:n.videoWidth,height:n.videoHeight}),o.setItem(r,n)}),Kt(n,"error",function(){return o.setError(r)})):"iframe"===e||i.match(/\.(html|php)($|\?)/i)?this.setItem(r,co("iframe",Y({src:i,frameborder:"0",allowfullscreen:"",class:"uk-lightbox-iframe"},h))):(a=i.match(/\/\/(?:.*?youtube(-nocookie)?\..*?[?&]v=|youtu\.be\/)([\w-]{11})[&?]?(.*)?/))?this.setItem(r,co("iframe",Y({src:"https://www.youtube"+(a[1]||"")+".com/embed/"+a[2]+(a[3]?"?"+a[3]:""),width:1920,height:1080},u,h))):(a=i.match(/\/\/.*?vimeo\.[a-z]+\/(\d+)[&?]?(.*)?/))&&pe("https://vimeo.com/api/oembed.json?maxwidth=1920&url="+encodeURI(i),{responseType:"json",withCredentials:!1}).then(function(t){var e=t.response,n=e.height,i=e.width;return o.setItem(r,co("iframe",Y({src:"https://player.vimeo.com/video/"+a[1]+(a[2]?"?"+a[2]:""),width:i,height:n},u,h)))},function(){return o.setError(r)}))}}],methods:{loadItem:function(t){void 0===t&&(t=this.index);var e=this.getItem(t);this.getSlide(e).childElementCount||Qt(this.$el,"itemload",[e])},getItem:function(t){return void 0===t&&(t=this.index),this.items[it(t,this.slides)]},setItem:function(t,e){Qt(this.$el,"itemloaded",[this,ve(this.getSlide(t),e)])},getSlide:function(t){return this.slides[this.items.indexOf(t)]},setError:function(t){this.setItem(t,'<span uk-icon="icon: bolt; ratio: 2"></span>')},showControls:function(){clearTimeout(this.controlsTimer),this.controlsTimer=setTimeout(this.hideControls,this.delayControls),Ne(this.$el,"uk-active","uk-transition-active")},hideControls:function(){Be(this.$el,"uk-active","uk-transition-active")}}};function co(t,e){var n=Ce("<"+t+">");return ot(n,e),n}var ho,lo={install:function(t,e){t.lightboxPanel||t.component("lightboxPanel",uo);Y(e.props,t.component("lightboxPanel").options.props)},props:{toggle:String},data:{toggle:"a"},computed:{toggles:{get:function(t,e){return Me(t.toggle,e)},watch:function(){this.hide()}}},disconnected:function(){this.hide()},events:[{name:"click",delegate:function(){return this.toggle+":not(.uk-disabled)"},handler:function(t){t.preventDefault(),this.show(t.current)}}],methods:{show:function(t){var n,e=this,i=J(this.toggles.map(fo),"source");return _(t)&&(n=fo(t).source,t=x(i,function(t){var e=t.source;return n===e})),this.panel=this.panel||this.$create("lightboxPanel",Y({},this.$props,{items:i})),Kt(this.panel.$el,"hidden",function(){return e.panel=!1}),this.panel.show(t)},hide:function(){return this.panel&&this.panel.hide()}}};function fo(e){var n={};return["href","caption","type","poster","alt","attrs"].forEach(function(t){n["href"===t?"source":t]=ut(e,t)}),n.attrs=En(n.attrs),n}var po={mixins:[dr],functional:!0,args:["message","status"],data:{message:"",status:"",timeout:5e3,group:null,pos:"top-center",clsContainer:"uk-notification",clsClose:"uk-notification-close",clsMsg:"uk-notification-message"},install:function(r){r.notification.closeAll=function(n,i){_e(document.body,function(t){var e=r.getComponent(t,"notification");!e||n&&n!==e.group||e.close(i)})}},computed:{marginProp:function(t){return"margin"+(w(t.pos,"top")?"Top":"Bottom")},startProps:function(){var t={opacity:0};return t[this.marginProp]=-this.$el.offsetHeight,t}},created:function(){var t=Ae("."+this.clsContainer+"-"+this.pos,this.container)||we(this.container,'<div class="'+this.clsContainer+" "+this.clsContainer+"-"+this.pos+'" style="display: block"></div>');this.$mount(we(t,'<div class="'+this.clsMsg+(this.status?" "+this.clsMsg+"-"+this.status:"")+'"> <a href class="'+this.clsClose+'" data-uk-close></a> <div>'+this.message+"</div> </div>"))},connected:function(){var t,e=this,n=L(Ve(this.$el,this.marginProp));Je.start(Ve(this.$el,this.startProps),((t={opacity:1})[this.marginProp]=n,t)).then(function(){e.timeout&&(e.timer=setTimeout(e.close,e.timeout))})},events:((ho={click:function(t){zt(t.target,'a[href="#"],a[href=""]')&&t.preventDefault(),this.close()}})[wt]=function(){this.timer&&clearTimeout(this.timer)},ho[bt]=function(){this.timeout&&(this.timer=setTimeout(this.close,this.timeout))},ho),methods:{close:function(t){function e(t){var e=Et(t);Qt(t,"close",[n]),ke(t),e&&!e.hasChildNodes()&&ke(e)}var n=this;this.timer&&clearTimeout(this.timer),t?e(this.$el):Je.start(this.$el,this.startProps).then(e)}}};var mo=["x","y","bgx","bgy","rotate","scale","color","backgroundColor","borderColor","opacity","blur","hue","grayscale","invert","saturate","sepia","fopacity","stroke"],go={mixins:[hr],props:mo.reduce(function(t,e){return t[e]="list",t},{}),data:mo.reduce(function(t,e){return t[e]=void 0,t},{}),computed:{props:function(m,g){var v=this;return mo.reduce(function(t,e){if(O(m[e]))return t;var n,i,r=e.match(/color/i),o=r||"opacity"===e,s=m[e].slice();o&&Ve(g,e,""),s.length<2&&s.unshift(("scale"===e?1:o?Ve(g,e):0)||0);var a,u,c,h,l,d,f=s.reduce(function(t,e){return z(e)&&e.replace(/-|\d/g,"").trim()||t},"");if(r?(a=g.style.color,s=s.map(function(t){return Ve(Ve(g,"color",t),"color").split(/[(),]/g).slice(1,-1).concat(1).slice(0,4).map(L)}),g.style.color=a):w(e,"bg")?(u="bgy"===e?"height":"width",s=s.map(function(t){return fn(t,u,v.$el)}),Ve(g,"background-position-"+e[2],""),i=Ve(g,"backgroundPosition").split(" ")["x"===e[2]?0:1],n=v.covers?(c=Math.min.apply(Math,s),h=Math.max.apply(Math,s),l=s.indexOf(c)<s.indexOf(h),d=h-c,s=s.map(function(t){return t-(l?c:h)}),(l?-d:0)+"px"):i):s=s.map(L),"stroke"===e){if(!s.some(function(t){return t}))return t;var p=Fi(v.$el);Ve(g,"strokeDasharray",p),"%"===f&&(s=s.map(function(t){return t*p/100})),s=s.reverse(),e="strokeDashoffset"}return t[e]={steps:s,unit:f,pos:n,bgPos:i,diff:d},t},{})},bgProps:function(){var e=this;return["bgx","bgy"].filter(function(t){return t in e.props})},covers:function(t,e){return i=(n=e).style.backgroundSize,r="cover"===Ve(Ve(n,"backgroundSize",""),"backgroundSize"),n.style.backgroundSize=i,r;var n,i,r}},disconnected:function(){delete this._image},update:{read:function(t){var e,n,i,u,c,h,l=this;this.matchMedia&&(t.image||!this.covers||!this.bgProps.length||(e=Ve(this.$el,"backgroundImage").replace(/^none|url\(["']?(.+?)["']?\)$/,"$1"))&&((n=new Image).src=e,(t.image=n).naturalWidth||(n.onload=function(){return l.$update()})),(i=t.image)&&i.naturalWidth&&(u={width:this.$el.offsetWidth,height:this.$el.offsetHeight},c={width:i.naturalWidth,height:i.naturalHeight},h=nt.cover(c,u),this.bgProps.forEach(function(t){var e,n=l.props[t],i=n.diff,r=n.bgPos,o=n.steps,s="bgy"===t?"height":"width",a=h[s]-u[s];a<i?u[s]=h[s]+i-a:i<a&&((e=u[s]/fn(r,s,l.$el))&&(l.props[t].steps=o.map(function(t){return t-(a-i)/e}))),h=nt.cover(c,u)}),t.dim=h))},write:function(t){var e=t.dim;this.matchMedia?e&&Ve(this.$el,{backgroundSize:e.width+"px "+e.height+"px",backgroundRepeat:"no-repeat"}):Ve(this.$el,{backgroundSize:"",backgroundRepeat:""})},events:["resize"]},methods:{reset:function(){var n=this;G(this.getCss(0),function(t,e){return Ve(n.$el,e,"")})},getCss:function(l){var d=this.props;return Object.keys(d).reduce(function(t,e){var n=d[e],i=n.steps,r=n.unit,o=n.pos,s=function(t,e,n){void 0===n&&(n=2);var i=vo(t,e),r=i[0],o=i[1],s=i[2];return(N(r)?r+Math.abs(r-o)*s*(r<o?1:-1):+o).toFixed(n)}(i,l);switch(e){case"x":case"y":r=r||"px",t.transform+=" translate"+p(e)+"("+L(s).toFixed("px"===r?0:2)+r+")";break;case"rotate":r=r||"deg",t.transform+=" rotate("+(s+r)+")";break;case"scale":t.transform+=" scale("+s+")";break;case"bgy":case"bgx":t["background-position-"+e[2]]="calc("+o+" + "+s+"px)";break;case"color":case"backgroundColor":case"borderColor":var a=vo(i,l),u=a[0],c=a[1],h=a[2];t[e]="rgba("+u.map(function(t,e){return t+=h*(c[e]-t),3===e?L(t):parseInt(t,10)}).join(",")+")";break;case"blur":r=r||"px",t.filter+=" blur("+(s+r)+")";break;case"hue":r=r||"deg",t.filter+=" hue-rotate("+(s+r)+")";break;case"fopacity":r=r||"%",t.filter+=" opacity("+(s+r)+")";break;case"grayscale":case"invert":case"saturate":case"sepia":r=r||"%",t.filter+=" "+e+"("+(s+r)+")";break;default:t[e]=s}return t},{transform:"",filter:""})}}};function vo(t,e){var n=t.length-1,i=Math.min(Math.floor(n*e),n-1),r=t.slice(i,i+2);return r.push(1===e?1:e%(1/n)*n),r}var wo={mixins:[go],props:{target:String,viewport:Number,easing:Number},data:{target:!1,viewport:1,easing:1},computed:{target:function(t,e){var n=t.target;return function t(e){return e?"offsetTop"in e?e:t(Et(e)):document.body}(n&&Pt(n,e)||e)}},update:{read:function(t,e){var n=t.percent;if(e.has("scroll")||(n=!1),this.matchMedia){var i,r,o=n;return i=Fn(this.target)/(this.viewport||1),r=this.easing,{percent:n=Z(i*(1-(r-r*i))),style:o!==n&&this.getCss(n)}}},write:function(t){var e=t.style;this.matchMedia?e&&Ve(this.$el,e):this.reset()},events:["scroll","resize"]}};var bo={update:{write:function(){var t;this.stack.length||this.dragging||(t=this.getValidIndex(this.index),~this.prevIndex&&this.index===t||this.show(t))},events:["resize"]}};function xo(t,e,n){var i,r=$o(t,e);return n?r-(i=t,rn(e).width/2-rn(i).width/2):Math.min(r,yo(e))}function yo(t){return Math.max(0,ko(t)-rn(t).width)}function ko(t){return Dt(t).reduce(function(t,e){return rn(e).width+t},0)}function $o(t,e){return t&&(sn(t).left+(lt?rn(t).width-rn(e).width:0))*(lt?-1:1)||0}function So(t,e,n){Qt(t,te(e,!1,!1,n))}var Io={mixins:[fi,oo,bo],props:{center:Boolean,sets:Boolean},data:{center:!1,sets:!1,attrItem:"uk-slider-item",selList:".uk-slider-items",selNav:".uk-slider-nav",clsContainer:"uk-slider-container",Transitioner:function(r,i,o,t){var e=t.center,s=t.easing,a=t.list,u=new ue,n=r?xo(r,a,e):xo(i,a,e)+rn(i).width*o,c=i?xo(i,a,e):n+rn(r).width*o*(lt?-1:1);return{dir:o,show:function(t,e,n){void 0===e&&(e=0);var i=n?"linear":s;return t-=Math.round(t*Z(e,-1,1)),this.translate(e),r&&this.updateTranslates(),e=r?e:Z(e,0,1),So(this.getItemIn(),"itemin",{percent:e,duration:t,timing:i,dir:o}),r&&So(this.getItemIn(!0),"itemout",{percent:1-e,duration:t,timing:i,dir:o}),Je.start(a,{transform:eo(-c*(lt?-1:1),"px")},t,i).then(u.resolve,Q),u.promise},cancel:function(){Je.cancel(a)},reset:function(){Ve(a,"transform","")},forward:function(t,e){return void 0===e&&(e=this.percent()),Je.cancel(a),this.show(t,e,!0)},translate:function(t){var e=this.getDistance()*o*(lt?-1:1);Ve(a,"transform",eo(Z(e-e*t-c,-ko(a),rn(a).width)*(lt?-1:1),"px")),this.updateTranslates(),r&&(t=Z(t,-1,1),So(this.getItemIn(),"itemtranslatein",{percent:t,dir:o}),So(this.getItemIn(!0),"itemtranslateout",{percent:1-t,dir:o}))},percent:function(){return Math.abs((Ve(a,"transform").split(",")[4]*(lt?-1:1)+n)/(c-n))},getDistance:function(){return Math.abs(c-n)},getItemIn:function(t){void 0===t&&(t=!1);var e=K(this.getActives(),"offsetLeft"),n=K(Dt(a),"offsetLeft"),i=Ot(n,e[0<o*(t?-1:1)?e.length-1:0]);return~i&&n[i+(r&&!t?o:0)]},getActives:function(){return[r||i].concat(Dt(a).filter(function(t){var e=$o(t,a);return n<e&&e+rn(t).width<=rn(a).width+n}))},updateTranslates:function(){var n=this.getActives();Dt(a).forEach(function(t){var e=v(n,t);So(t,"itemtranslate"+(e?"in":"out"),{percent:e?1:0,dir:t.offsetLeft<=i.offsetLeft?1:-1})})}}}},computed:{avgWidth:function(){return ko(this.list)/this.length},finite:function(t){var e;return t.finite||Math.ceil(ko(this.list))<rn(this.list).width+(e=this.list,Math.max.apply(Math,[0].concat(Dt(e).map(function(t){return rn(t).width}))))+this.center},maxIndex:function(){if(!this.finite||this.center&&!this.sets)return this.length-1;if(this.center)return X(this.sets);var e=0,n=yo(this.list),t=x(this.slides,function(t){return n<=e||void(e+=rn(t).width)});return~t?t:this.length-1},sets:function(t){var o=this;if(e=t.sets){var e,s=rn(this.list).width/(this.center?2:1),a=0,u=s,c=0;return!D(e=K(this.slides,"offsetLeft").reduce(function(t,e,n){var i,r=rn(e).width;return a<c+r&&(!o.center&&n>o.maxIndex&&(n=o.maxIndex),v(t,n)||(i=o.slides[n+1],o.center&&i&&r<u-rn(i).width/2?u-=r:(u=s,t.push(n),a=c+s+(o.center?r/2:0)))),c+=r,t},[]))&&e}},transitionOptions:function(){return{center:this.center,list:this.list}}},connected:function(){He(this.$el,this.clsContainer,!Ae("."+this.clsContainer,this.$el))},update:{write:function(){var n=this;this.navItems.forEach(function(t){var e=H(ut(t,n.attrItem));!1!==e&&(t.hidden=!n.maxIndex||e>n.maxIndex||n.sets&&!v(n.sets,e))}),!this.length||this.dragging||this.stack.length||(this.reorder(),this._translate(1));var e=this._getTransitioner(this.index).getActives();this.slides.forEach(function(t){return He(t,n.clsActive,v(e,t))}),!this.clsActivated||this.sets&&!v(this.sets,L(this.index))||this.slides.forEach(function(t){return He(t,n.clsActivated||"",v(e,t))})},events:["resize"]},events:{beforeitemshow:function(t){!this.dragging&&this.sets&&this.stack.length<2&&!v(this.sets,this.index)&&(this.index=this.getValidIndex());var e=Math.abs(this.index-this.prevIndex+(0<this.dir&&this.index<this.prevIndex||this.dir<0&&this.index>this.prevIndex?(this.maxIndex+1)*this.dir:0));if(!this.dragging&&1<e){for(var n=0;n<e;n++)this.stack.splice(1,0,0<this.dir?"next":"previous");t.preventDefault()}else{var i=this.dir<0||!this.slides[this.prevIndex]?this.index:this.prevIndex;this.duration=so(this.avgWidth/this.velocity)*(rn(this.slides[i]).width/this.avgWidth),this.reorder()}},itemshow:function(){~this.prevIndex&&Ne(this._getTransitioner().getItemIn(),this.clsActive)}},methods:{reorder:function(){var n=this;if(this.finite)Ve(this.slides,"order","");else{var i=0<this.dir&&this.slides[this.prevIndex]?this.prevIndex:this.index;if(this.slides.forEach(function(t,e){return Ve(t,"order",0<n.dir&&e<i?1:n.dir<0&&e>=n.index?-1:"")}),this.center)for(var t=this.slides[i],e=rn(this.list).width/2-rn(t).width/2,r=0;0<e;){var o=this.getIndex(--r+i,i),s=this.slides[o];Ve(s,"order",i<o?-2:-1),e-=rn(s).width}}},getValidIndex:function(t,e){if(void 0===t&&(t=this.index),void 0===e&&(e=this.prevIndex),t=this.getIndex(t,e),!this.sets)return t;var n;do{if(v(this.sets,t))return t;n=t,t=this.getIndex(t+this.dir,e)}while(t!==n);return t}}};var Eo={mixins:[go],data:{selItem:"!li"},computed:{item:function(t,e){return Pt(t.selItem,e)}},events:[{name:"itemin itemout",self:!0,el:function(){return this.item},handler:function(t){var n=this,i=t.type,e=t.detail,r=e.percent,o=e.duration,s=e.timing,a=e.dir;mn.read(function(){var t=n.getCss(Co(i,a,r)),e=n.getCss(To(i)?.5:0<a?1:0);mn.write(function(){Ve(n.$el,t),Je.start(n.$el,e,o,s).catch(Q)})})}},{name:"transitioncanceled transitionend",self:!0,el:function(){return this.item},handler:function(){Je.cancel(this.$el)}},{name:"itemtranslatein itemtranslateout",self:!0,el:function(){return this.item},handler:function(t){var e=this,n=t.type,i=t.detail,r=i.percent,o=i.dir;mn.read(function(){var t=e.getCss(Co(n,o,r));mn.write(function(){return Ve(e.$el,t)})})}}]};function To(t){return u(t,"in")}function Co(t,e,n){return n/=2,To(t)?e<0?1-n:n:e<0?n:1-n}var _o,Ao,Mo=Y({},Qr,{fade:{show:function(){return[{opacity:0,zIndex:0},{zIndex:-1}]},percent:function(t){return 1-Ve(t,"opacity")},translate:function(t){return[{opacity:1-t,zIndex:0},{zIndex:-1}]}},scale:{show:function(){return[{opacity:0,transform:no(1.5),zIndex:0},{zIndex:-1}]},percent:function(t){return 1-Ve(t,"opacity")},translate:function(t){return[{opacity:1-t,transform:no(1+.5*t),zIndex:0},{zIndex:-1}]}},pull:{show:function(t){return t<0?[{transform:eo(30),zIndex:-1},{transform:eo(),zIndex:0}]:[{transform:eo(-100),zIndex:0},{transform:eo(),zIndex:-1}]},percent:function(t,e,n){return n<0?1-to(e):to(t)},translate:function(t,e){return e<0?[{transform:eo(30*t),zIndex:-1},{transform:eo(-100*(1-t)),zIndex:0}]:[{transform:eo(100*-t),zIndex:0},{transform:eo(30*(1-t)),zIndex:-1}]}},push:{show:function(t){return t<0?[{transform:eo(100),zIndex:0},{transform:eo(),zIndex:-1}]:[{transform:eo(-30),zIndex:-1},{transform:eo(),zIndex:0}]},percent:function(t,e,n){return 0<n?1-to(e):to(t)},translate:function(t,e){return e<0?[{transform:eo(100*t),zIndex:0},{transform:eo(-30*(1-t)),zIndex:-1}]:[{transform:eo(-30*t),zIndex:-1},{transform:eo(100*(1-t)),zIndex:0}]}}}),zo={mixins:[fi,ao,bo],props:{ratio:String,minHeight:Number,maxHeight:Number},data:{ratio:"16:9",minHeight:!1,maxHeight:!1,selList:".uk-slideshow-items",attrItem:"uk-slideshow-item",selNav:".uk-slideshow-nav",Animations:Mo},update:{read:function(){var t=this.ratio.split(":").map(Number),e=t[0],n=(n=t[1])*this.list.offsetWidth/e||0;return this.minHeight&&(n=Math.max(this.minHeight,n)),this.maxHeight&&(n=Math.min(this.maxHeight,n)),{height:n-ln(this.list,"height","content-box")}},write:function(t){var e=t.height;0<e&&Ve(this.list,"minHeight",e)},events:["resize"]}},No={mixins:[fi,Gr],props:{group:String,threshold:Number,clsItem:String,clsPlaceholder:String,clsDrag:String,clsDragState:String,clsBase:String,clsNoDrag:String,clsEmpty:String,clsCustom:String,handle:String},data:{group:!1,threshold:5,clsItem:"uk-sortable-item",clsPlaceholder:"uk-sortable-placeholder",clsDrag:"uk-sortable-drag",clsDragState:"uk-drag",clsBase:"uk-sortable",clsNoDrag:"uk-sortable-nodrag",clsEmpty:"uk-sortable-empty",clsCustom:"",handle:!1,pos:{}},created:function(){var n=this;["init","start","move","end"].forEach(function(t){var e=n[t];n[t]=function(t){Y(n.pos,ae(t)),e(t)}})},events:{name:mt,passive:!1,handler:"init"},computed:{target:function(){return(this.$el.tBodies||[this.$el])[0]},items:function(){return Dt(this.target)},isEmpty:{get:function(){return D(this.items)},watch:function(t){He(this.target,this.clsEmpty,t)},immediate:!0},handles:{get:function(t,e){var n=t.handle;return n?Me(n,e):this.items},watch:function(t,e){Ve(e,{touchAction:"",userSelect:""}),Ve(t,{touchAction:pt?"none":"",userSelect:"none"})},immediate:!0}},update:{write:function(t){var e,n,i,r,o,s,a,u,c,h,l,d,f,p;this.drag&&Et(this.placeholder)&&(n=(e=this.pos).x,i=e.y,o=(r=this.origin).offsetTop,s=r.offsetLeft,a=this.placeholder,Ve(this.drag,{top:i-o,left:n-s}),(u=this.getSortable(document.elementFromPoint(n,i)))&&((c=u.items).some(Je.inProgress)||(d={x:n,y:i},h=(l=c)[x(l,function(t){return et(d,t.getBoundingClientRect())})],(!c.length||h&&h!==a)&&(f=this.getSortable(a),!1!==(p=function(t,e,n,i,r,o){if(!Dt(t).length)return;var s=e.getBoundingClientRect();if(!o)return function(t,e){var n=1===Dt(t).length;n&&we(t,e);var i=Dt(t),r=i.some(function(t,e){var n=t.getBoundingClientRect();return i.slice(e+1).some(function(t){var e=t.getBoundingClientRect();return!Bo([n.left,n.right],[e.left,e.right])})});n&&ke(e);return r}(t,n)||r<s.top+s.height/2?e:e.nextElementSibling;var a=n.getBoundingClientRect(),u=Bo([s.top,s.bottom],[a.top,a.bottom]),c=u?i:r,h=u?"width":"height",l=u?"left":"top",d=u?"right":"bottom",f=a[h]<s[h]?s[h]-a[h]:0;if(a[l]<s[l])return!(f&&c<s[l]+f)&&e.nextElementSibling;if(f&&c>s[d]-f)return!1;return e}(u.target,h,a,n,i,u===f&&t.moved!==h))&&(p&&a===p||(u!==f?(f.remove(a),t.moved=h):delete t.moved,u.insert(a,p),this.touched.add(u)))))))},events:["move"]},methods:{init:function(t){var e=t.target,n=t.button,i=t.defaultPrevented,r=this.items.filter(function(t){return Nt(e,t)})[0];!r||i||0<n||It(e)||Nt(e,"."+this.clsNoDrag)||this.handle&&!Nt(e,this.handle)||(t.preventDefault(),this.touched=new Set([this]),this.placeholder=r,this.origin=Y({target:e,index:Ot(r)},this.pos),Kt(document,gt,this.move),Kt(document,vt,this.end),this.threshold||this.start(t))},start:function(t){var e,n,i;this.drag=(e=this.$container,n=this.placeholder,Ve(i=we(e,n.outerHTML.replace(/(^<)(?:li|tr)|(?:li|tr)(\/>$)/g,"$1div$2")),"margin","0","important"),Ve(i,Y({boxSizing:"border-box",width:n.offsetWidth,height:n.offsetHeight},Ve(n,["paddingLeft","paddingRight","paddingTop","paddingBottom"]))),un(i.firstElementChild,un(n.firstElementChild)),i);var r,o,s=this.placeholder.getBoundingClientRect(),a=s.left,u=s.top;Y(this.origin,{offsetLeft:this.pos.x-a,offsetTop:this.pos.y-u}),Ne(this.drag,this.clsDrag,this.clsCustom),Ne(this.placeholder,this.clsPlaceholder),Ne(this.items,this.clsItem),Ne(document.documentElement,this.clsDragState),Qt(this.$el,"start",[this,this.placeholder]),r=this.pos,o=Date.now(),_o=setInterval(function(){var t=r.x,a=r.y;a+=window.pageYOffset;var u=.3*(Date.now()-o);o=Date.now(),Wn(document.elementFromPoint(t,r.y)).reverse().some(function(t){var e=t.scrollTop,n=t.scrollHeight,i=on(Vn(t)),r=i.top,o=i.bottom,s=i.height;if(r<a&&a<r+35)e-=u;else{if(!(a<o&&o-35<a))return;e+=u}if(0<e&&e<n-s)return Ln(t,e),!0})},15),this.move(t)},move:function(t){this.drag?this.$emit("move"):(Math.abs(this.pos.x-this.origin.x)>this.threshold||Math.abs(this.pos.y-this.origin.y)>this.threshold)&&this.start(t)},end:function(){var t,i=this;Jt(document,gt,this.move),Jt(document,vt,this.end),Jt(window,"scroll",this.scroll),this.drag&&(clearInterval(_o),t=this.getSortable(this.placeholder),this===t?this.origin.index!==Ot(this.placeholder)&&Qt(this.$el,"moved",[this,this.placeholder]):(Qt(t.$el,"added",[t,this.placeholder]),Qt(this.$el,"removed",[this,this.placeholder])),Qt(this.$el,"stop",[this,this.placeholder]),ke(this.drag),this.drag=null,this.touched.forEach(function(t){var e=t.clsPlaceholder,n=t.clsItem;return i.touched.forEach(function(t){return Be(t.items,e,n)})}),this.touched=null,Be(document.documentElement,this.clsDragState))},insert:function(t,e){var n=this;Ne(this.items,this.clsItem);function i(){return e?be(e,t):we(n.target,t)}this.animation?this.animate(i):i()},remove:function(t){Nt(t,this.target)&&(this.animation?this.animate(function(){return ke(t)}):ke(t))},getSortable:function(t){do{var e=this.$getComponent(t,"sortable");if(e&&(e===this||!1!==this.group&&e.group===this.group))return e}while(t=Et(t))}}};function Bo(t,e){return t[1]>e[0]&&e[1]>t[0]}var Do={mixins:[dr,pi,ki],args:"title",props:{delay:Number,title:String},data:{pos:"top",title:"",delay:0,animation:["uk-animation-scale-up"],duration:100,cls:"uk-active",clsPos:"uk-tooltip"},beforeConnect:function(){var t;this._hasTitle=st(this.$el,"title"),ot(this.$el,"title",""),this.updateAria(!1),function(t){return It(t)||At(t,"a,button")||st(t,"tabindex")}(t=this.$el)||ot(t,"tabindex","0")},disconnected:function(){this.hide(),ot(this.$el,"title",this._hasTitle?this.title:null)},methods:{show:function(){var e=this;!this.isToggled(this.tooltip)&&this.title&&(this._unbind=Zt(document,"show keydown "+mt,this.hide,!1,function(t){return t.type===mt&&!Nt(t.target,e.$el)||"keydown"===t.type&&27===t.keyCode||"show"===t.type&&t.detail[0]!==e&&t.detail[0].$name===e.$name}),clearTimeout(this.showTimer),this.showTimer=setTimeout(this._show,this.delay))},hide:function(){var t=this;At(this.$el,"input:focus")||(clearTimeout(this.showTimer),this.isToggled(this.tooltip)&&this.toggleElement(this.tooltip,!1,!1).then(function(){t.tooltip=ke(t.tooltip),t._unbind()}))},_show:function(){var n=this;this.tooltip=we(this.container,'<div class="'+this.clsPos+'"> <div class="'+this.clsPos+'-inner">'+this.title+"</div> </div>"),Kt(this.tooltip,"toggled",function(t,e){n.updateAria(e),e&&(n.positionAt(n.tooltip,n.$el),n.origin="y"===n.getAxis()?dn(n.dir)+"-"+n.align:n.align+"-"+dn(n.dir))}),this.toggleElement(this.tooltip,!0)},updateAria:function(t){ot(this.$el,"aria-expanded",t)}},events:((Ao={focus:"show",blur:"hide"})[wt+" "+bt]=function(t){se(t)||this[t.type===wt?"show":"hide"]()},Ao[mt]=function(t){se(t)&&this.show()},Ao)};var Oo={props:{allow:String,clsDragover:String,concurrent:Number,maxSize:Number,method:String,mime:String,msgInvalidMime:String,msgInvalidName:String,msgInvalidSize:String,multiple:Boolean,name:String,params:Object,type:String,url:String},data:{allow:!1,clsDragover:"uk-dragover",concurrent:1,maxSize:0,method:"POST",mime:!1,msgInvalidMime:"Invalid File Type: %s",msgInvalidName:"Invalid File Name: %s",msgInvalidSize:"Invalid File Size: %s Kilobytes Max",multiple:!1,name:"files[]",params:{},type:"",url:"",abort:Q,beforeAll:Q,beforeSend:Q,complete:Q,completeAll:Q,error:Q,fail:Q,load:Q,loadEnd:Q,loadStart:Q,progress:Q},events:{change:function(t){At(t.target,'input[type="file"]')&&(t.preventDefault(),t.target.files&&this.upload(t.target.files),t.target.value="")},drop:function(t){Ho(t);var e=t.dataTransfer;e&&e.files&&(Be(this.$el,this.clsDragover),this.upload(e.files))},dragenter:function(t){Ho(t)},dragover:function(t){Ho(t),Ne(this.$el,this.clsDragover)},dragleave:function(t){Ho(t),Be(this.$el,this.clsDragover)}},methods:{upload:function(t){var i=this;if(t.length){Qt(this.$el,"upload",[t]);for(var e=0;e<t.length;e++){if(this.maxSize&&1e3*this.maxSize<t[e].size)return void this.fail(this.msgInvalidSize.replace("%s",this.maxSize));if(this.allow&&!Po(this.allow,t[e].name))return void this.fail(this.msgInvalidName.replace("%s",this.allow));if(this.mime&&!Po(this.mime,t[e].type))return void this.fail(this.msgInvalidMime.replace("%s",this.mime))}this.multiple||(t=[t[0]]),this.beforeAll(this,t);var r=function(t,e){for(var n=[],i=0;i<t.length;i+=e){for(var r=[],o=0;o<e;o++)r.push(t[i+o]);n.push(r)}return n}(t,this.concurrent),o=function(t){var e,n=new FormData;for(e in t.forEach(function(t){return n.append(i.name,t)}),i.params)n.append(e,i.params[e]);pe(i.url,{data:n,method:i.method,responseType:i.type,beforeSend:function(t){var e=t.xhr;return e.upload&&Kt(e.upload,"progress",i.progress),["loadStart","load","loadEnd","abort"].forEach(function(t){return Kt(e,t.toLowerCase(),i[t])}),i.beforeSend(t)}}).then(function(t){i.complete(t),r.length?o(r.shift()):i.completeAll(t)},function(t){return i.error(t)})};o(r.shift())}}}};function Po(t,e){return e.match(new RegExp("^"+t.replace(/\//g,"\\/").replace(/\*\*/g,"(\\/[^\\/]+)*").replace(/\*/g,"[^\\/]+").replace(/((?!\\))\?/g,"$1.")+"$","i"))}function Ho(t){t.preventDefault(),t.stopPropagation()}return G(Object.freeze({__proto__:null,Countdown:Hr,Filter:Kr,Lightbox:lo,LightboxPanel:uo,Notification:po,Parallax:wo,Slider:Io,SliderParallax:Eo,Slideshow:zo,SlideshowParallax:Eo,Sortable:No,Tooltip:Do,Upload:Oo}),function(t,e){return Zn.component(e,t)}),Zn});
//# sourceMappingURL=data:application/json;charset=utf8;base64,